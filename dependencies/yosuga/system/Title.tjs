/*
	ロゴ・タイトル
*/

class Logo extends Sprite, SelectItemNotifyBase, SceneBase{
	var _state = 0;
	var _fCancel = false;
	var _spr = %[];

	var _movie;

	var _te;

	var SPR_LIST = [
		%[id:"ATTENTION_MARK", file:"FRM_0502", center:[100,  19], pos:[400, 120]], 
		%[id:"ATTENTION"     , file:"FRM_0503", center:[320, 150], pos:[400, 322]]
	];

	var stLogo = 1;
	var stAttentionPlay = 2;
	var stAttentionEnd = 3;

	function Logo(win, par){
		Sprite(...);
		hasImage = false;
		hitType = htMask;
		hitThreshold = 0;
		setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
		fillRect(0, 0, width, height, 0x0);
		absolute = LAYER_LOGO;

		_spr["BASE"] = new global.Sprite(win, this);
		with(_spr.BASE){
			.loadImages("FRM_0501");
			.setSizeToImageSize();
			.setPos(WINDOW_CENTER_X-.width\2, WINDOW_CENTER_Y-.height\2);
			.hitThreshold = 256;
		}

		for(var i=0;i<SPR_LIST.count;i++){
			_spr[SPR_LIST[i].id] = new global.Sprite(window, _spr.BASE);
			with(_spr[SPR_LIST[i].id]){
				.loadImages(SPR_LIST[i].file);
				.setSizeToImageSize();
				.setAffineOffset(SPR_LIST[i].center[0], SPR_LIST[i].center[1]);
				.setCenter(SPR_LIST[i].center[0], SPR_LIST[i].center[1]);
				.setPos(SPR_LIST[i].pos[0], SPR_LIST[i].pos[1]);
				.hitThreshold = 256;
				.visible = true;
			}
		}

		CreateSprCover();
		with(SPR_COVER){
			.fillRect(0, 0, SPR_COVER.width, SPR_COVER.height, 0xffffffff);
		}

		visible = true;

		_movie = new MovieLayer(win, this);
		_movie.hitThreshold = 256;
		_movie.start("sphere", this);
		_state = stLogo;

		_te = new TimerEvent();

		OnceCall(step01, 1500);

		window.addInputNotify(this);
	}
	function finalize(){
		window.removeInputNotify(this);

		cancel();
		close();

		for(var i=0;i<SPR_LIST.count;i++){
			invalidate _spr[SPR_LIST[i].id];
		}
		invalidate _spr["BASE"];

		invalidate _movie;

		_te.stop();
		invalidate _te;

		global.Sprite.finalize();
	}

	//ロゴ：時間待ち
	function step01(){
		PlaySystemVoice("ブランドコール");
	}
	//ロゴ→警告文フェード
	function step02(){
		_state = stAttentionPlay;
		if(CONFIG.muteSystem || CONFIG.muteMaster)
			keyframe(stAttentionEnd);

		with(_spr.BASE){
			.setTransitionCompleteCall(step03);
			.opacity = 0;
			.setBlendingEnvelope(255);
			.beginActivation(1000);
			.visible = true;
		}
	}
	//警告文：時間待ち
	function step03(){
		_spr.BASE.setTransitionCompleteCall();
		OnceCall(step04, 8000);
	}
	//警告文：フェードアウト
	function step04(){
		with(SPR_COVER){
			.setTransitionCompleteCall(step05);
			.opacity = 0;
			.setBlendingEnvelope(255);
			.beginActivation(1000);
			.visible = true;
		}
	}
	//次のシーンに移動する
	function step05(){
		with(SPR_COVER){
			.setTransitionCompleteCall();
		}
		game.changeScene(SCENE_TITLE);
		close();
	}

	function cancel(){
		OnceCallCancel(step01);
		OnceCallCancel(step03);
		OnceCallCancel(step04);
		OnceCallCancel(step05);
		with(_spr.BASE){
			.setTransitionCompleteCall();
			.flushActivation();
		}
		with(SPR_COVER){
			.setTransitionCompleteCall();
			.flushActivation();
		}
	}

	function close(){
		cancel();

		visible = false;
		valid = false;
	}

	function onKeyDown(key, shift){
		onAnyInput();
	}
	function onMouseDown(x, y, button, shift){
		onAnyInput();
	}

	function keyframe(state){
		switch(state){
		case stAttentionEnd : 
			for(var i=0;i<SPR_LIST.count;i++){
				with(_spr[SPR_LIST[i].id]){
					.stopActivation();
					.setPos(SPR_LIST[i].pos[0], SPR_LIST[i].pos[1]);
					.visible = true;
				}
			}
			break;
		}
	}

	function spriteAction(spr, path=[], accel=0, time=0, show=true){
		spr.stopActivation();

		if(!show){
			spr.visible = false;
			return;
		}

		for(var i=0;i<path.count;i+=7){
			if(path[i+2] == -1) path[i+2] = spr.absolute;
		}

		spr.setMovingSplineEnvelope2(path, accel);
		spr.beginActivation(time);
		spr.visible = true;
	}

	function onAnyInput(){
		if(!valid) return;

		cancel();

		_te.stop();

		switch(_state){
		case stLogo : 
			_movie.stop();
			break;
		case stAttentionPlay : 
			_fCancel = true;
			keyframe(stAttentionEnd);
			_state = stAttentionEnd;
			OnceCall(step04, 4000);
			break;
		case stAttentionEnd : 
		default : 
			_fCancel = true;
			step05(); 
			break;
		}
	}

	function debugJump(str, label=""){
		StopBgm();
		close();
		game.changeScene(SCENE_ADV, true, %[debug:str, label:label]);
	}

	function action(ev){
		if(ev.type == "Movie.onStatusChanged" && ev.status == "stop"){
			_movie.visible = false;
			OnceCall(step02, 100);
		}
	}
}

class MovieScene extends Layer, SceneBase{
	function MovieScene(win, par){
		Layer(...);
		hasImage = false;
		setSize(WINDOW_WIDTH, WINDOW_HEIGHT);

		if(SPR_COVER != null){
			with(SPR_COVER){
				.setTransitionCompleteCall();
				.opacity = 0;
				.visible = false;
			}
		}

		PlayMovie("cube", this);
		visible = true;
		win.addInputNotify(this);
	}
	function finalize(){
		win.removeInputNotify(this);
		global.Layer.finalize();
	}

	function who(){return "MovieScene";}

	function close(){
		StopMovie();
		visible = false;
		valid = false;
		game.changeScene(SCENE_TITLE);
	}

	function action(ev){
		if(ev.status == "stop") close();
	}

	function debugJump(str, label=""){
		StopBgm();
		close();
		game.changeScene(SCENE_ADV, true, %[debug:str, label:label]);
	}

	function onKeyDown(key, shift){
		if(key == VK_ESCAPE) StopMovie();
	}
	function onMouseDown(x, y, button, shift){
		if(button == mbRight) StopMovie();
	}
}

class Title extends Sprite, SelectItemNotifyBase, SceneBase, ChainItemBase{
	var _spr = [];

	var _btnBase;
	var _ptGrp = [];
	var _grpBtn, _grpBtnBonus;

	var _separate =[];

	var _logo;
	@if(__TRIAL__ != 0)
		var _logoTR;
	@endif

	var _version;

	var _sprASaveInfo;

	var _enterBonus = false;

	var BTN_LIST = [
		%[id:"btnContinue", file:"FRM_0553", ptn:2, par:0, flag:0], 
		%[id:"btnStart"   , file:"FRM_0551", ptn:2, par:0, flag:0], 
		%[id:"btnLoad"    , file:"FRM_0552", ptn:2, par:0, flag:0], 
		%[id:"btnConfig"  , file:"FRM_0554", ptn:2, par:0, flag:0], 
		%[id:"btnBonus"   , file:"FRM_0555", ptn:2, par:0, flag:0], 
		%[id:"btnEnd"     , file:"FRM_0556", ptn:2, par:0, flag:0], 

		%[id:"btnAlbum"   , file:"FRM_0561", ptn:2, par:1, flag:0], 
		%[id:"btnMusic"   , file:"FRM_0562", ptn:2, par:1, flag:0], 
		%[id:"btnMemories", file:"FRM_0563", ptn:2, par:1, flag:0]
	];

	function Title(win, par, fBonus=false){
		Sprite(...);
		hitThreshold = 0;
		loadImages("FRM_0511");
		setSizeToImageSize();
		absolute = LAYER_TITLE;

		_btnBase = new global.Layer(win, this);
		with(_btnBase){
			.setSize(800, 90);

			.setPos(0, WINDOW_HEIGHT-.height);

			.visible = true;
		}

		_version = new global.Layer(win, this);
		with(_version){
			var text = "version "+GAME_VERSION;
			.font.height = 21;
			.font.bold = true;
			var w = .font.getTextWidth(text) + 8;
			.setSize(w, .font.height+4);
			.setPos(_btnBase.left, _btnBase.top);
			.setPos(.left+_btnBase.width-.width, .top+_btnBase.height-.height);
			.drawText(4, 0, text, 0xffffff, 255, true, 1024*3, GetDefineColor("black"), 3, 0, 0);
			.visible = true;
		}

		var bit = 16;
		var h = 43;
		var pitch = h + bit;
		_grpBtn = new SelectItemGroupSprite(win, this);
		with(_grpBtn){
			.setSize(_btnBase.width, _btnBase.height);
			.setPos(_btnBase.left, _btnBase.top);
		}
		_grpBtnBonus = new SelectItemGroupSprite(win, this);
		with(_grpBtnBonus){
			.setSize(_btnBase.width, _btnBase.height);
			.setPos(_btnBase.left, _btnBase.top);
			.opacity = 0;
			.visible = true;
		}

		_ptGrp[0] = new Point(_grpBtn.left, _grpBtn.top);
		_ptGrp[1] = new Point(_grpBtnBonus.left, _grpBtnBonus.top);
		for(var i=0;i<BTN_LIST.count;i++){
			this[BTN_LIST[i].id] = new Button(win, this);
			with(this[BTN_LIST[i].id]){
				.parent = BTN_LIST[i].par == 0 ? _grpBtn : _grpBtnBonus;

				if(BTN_LIST[i].file !== void)
					.create(BTN_LIST[i].file, BTN_LIST[i].ptn);

				.visible = false;
			}
		}

		var interval = 3;
		var layout = [];
		if(ChkAutoSave()){
			layout.add(btnContinue);
		}
		layout.add(btnStart);
		layout.add(btnLoad);
		layout.add(btnConfig);
		@if(__TRIAL__ == 0)
			if(ChkGlobalFlag(1)){
				layout.add(btnBonus);
			}
		@endif
		layout.add(btnEnd);
		setLayout(layout, 89, 24, interval);

		layout.clear();
		layout.add(btnAlbum);
		layout.add(btnMusic);
		layout.add(btnMemories);
		setLayout(layout, 434, 36, interval);

		@if(__TRIAL__ == 0)
			if(!ChkGlobalFlag(1))	btnBonus.visible = false;
		@endif
		@if(__TRIAL__ != 0)
			btnBonus.visible = false;
		@endif

		btnStart.hitThreshold = 0;
		btnLoad.hitThreshold = 0;
		btnContinue.hitThreshold = 0;
		btnConfig.hitThreshold = 0;
		btnBonus.hitThreshold = 0;
		btnEnd.hitThreshold = 0;
		btnAlbum.hitThreshold = 256;
		btnMusic.hitThreshold = 256;
		btnMemories.hitThreshold = 256;

		addChainItem(btnContinue);
		addChainItem(btnStart);
		addChainItem(btnLoad);
		addChainItem(btnConfig);
		if(btnBonus.visible) addChainItem(btnBonus);
		addChainItem(btnEnd);

		_logo = new global.Sprite(win, this);
		with(_logo){
			.loadImages("FRM_0513");
			.setSizeToImageSize();

			.setPos(176, 88);

			.hitThreshold = 256;
			.visible = true;

			PlaySystemVoice("タイトルコール");
		}
		@if(__TRIAL__)
			_logoTR = new global.Sprite(win, this);
			with(_logoTR){
				.loadImages("FRM_0513");
				.setSizeToImageSize();

				.setPos(_logo.left+_logo.width-.width, _logo.top+_logo.height);

				.hitThreshold = 256;
				.visible = true;

				PlaySystemVoice("タイトルコール");
			}
		@endif

		if(SPR_COVER == null){
			CreateSprCover();
			SPR_COVER.fillRect(0, 0, SPR_COVER.width, SPR_COVER.height, 0xffffffff);
		}
		with(SPR_COVER){
			.opacity = 255;
			.setBlendingEnvelope(0);
			.type = ltAdditive;
			.beginActivation(1000);
			.visible = true;
		}

		PlayBgm("BGM07");

		_sprASaveInfo = new SavedataHeader(win, this, true);

		fadeEnd();
		visible = true;

		if(fBonus) enterBonus(0);

		window.addInputNotify(this);
	}
	function finalize(){
		window.removeInputNotify(this);

		InvalidateArray(_spr);
		invalidate _spr;
		for(var i=0;i<BTN_LIST.count;i++) invalidate this[BTN_LIST[i].id];
		invalidate _btnBase;
		invalidate _grpBtn;
		invalidate _grpBtnBonus;
		InvalidateArray(_ptGrp);

		InvalidateArray(_separate);

		invalidate _logo;
		@if(__TRIAL__ != 0)
			invalidate _logoTR;
		@endif
		invalidate _version;
		invalidate _sprASaveInfo;

		global.Sprite.finalize();
	}

	function close(){
		visible = false;
		valid = false;
	}

	function fadeEnd(){
		setTransitionCompleteCall();
		with(_grpBtn){
			.opacity = 0;
			.setBlendingEnvelope(255);
			.beginActivation(500);
			.visible = true;
		}
	}

	function setLayout(layout=[], sx, sy, interval=0){
		var dx = sx;
		var dy = sy;
		for(var i=0;i<layout.count;i++){
			with(layout[i]){
				.setPos(dx, dy - .height \ 2);
				dx += .width + interval;
				.visible = true;
			}
		}
	}

	function debugJump(str, label=""){
		StopBgm();
		close();
		game.changeScene(SCENE_ADV, true, %[debug:str, label:label]);
	}

	function onButtonDownL(target){
		switch(target){
		case btnStart :
			hitThresholdSelectItems(256);
			@if(__TRIAL__ == 0)
				game.changeScene(SCENE_ADV, true, %[scenario:"00_z000"]);
			@endif
			@if(__TRIAL__ != 0)
				game.changeScene(SCENE_ADV, true, %[scenario:"00_z000"]);
			@endif

			PlaySystemVoice("タイトル：初めから");

			StopBgm(5000);

			var mv = [[0, 0], [64, 0], [-64, 0], [128, 0], [-128, 0]];
			for(var i=0;i<_spr.count;i++){
				with(_spr[i]){
					if(i==0){
						.setZoomingEnvelope(.zoomx, 120);
						.beginActivation(5000);
					}else{
						.setBlendingEnvelope(0);
						.setMovingEnvelope(.left, .top, .left+mv[i][0], .top+mv[i][1], 2);
						.beginActivation(1000);
					}
				}
			}

			setTransitionCompleteCall(close);
			setBlendingEnvelope(0);
			beginActivation(3000);

			break;
		case btnLoad :
			PlaySystemVoice("タイトル：ロード");

			CallLoadSave(true, null, true);
			break;
		case btnContinue :
			game.changeScene(SCENE_ADV, true, %[file:"asave.bmp"]);

			setTransitionCompleteCall(close);
			setBlendingEnvelope(0);
			beginActivation(300);

			break;
		case btnConfig :
			PlaySystemVoice("タイトル：コンフィグ");

			CallConfig();
			break;
		case btnBonus :
			PlaySystemVoice("タイトル：鑑賞");
			enterBonus();
			break;
		case btnAlbum :

			hitThresholdSelectItems(256);

			game.changeScene(SCENE_ALBUM);

			//StopBgm(5000);

			setBlendingEnvelope(0);
			beginActivation(500);
			setTransitionCompleteCall(close);
			break;
		case btnMusic :
			hitThresholdSelectItems(256);

			game.changeScene(SCENE_MUSIC);

			StopBgm(5000);

			setBlendingEnvelope(0);
			beginActivation(500);
			setTransitionCompleteCall(close);
			break;
		case btnMemories :
			hitThresholdSelectItems(256);

			game.changeScene(SCENE_MEMORIES);

			//StopBgm(5000);

			setBlendingEnvelope(0);
			beginActivation(500);
			setTransitionCompleteCall(close);
			break;
		case btnEnd :
			PlaySystemVoice("ゲーム終了：確認");
			CallConfirm("ゲームを終了しますか？", SystemRegister.CONFIRM_END, game.exitGame, endCancel, true);
			break;
		}
	}
	function onButtonDownR(target){
		onMouseDown(0, 0, mbRight, 0);
	}

	function onButtonEnter(target){
		switch(target){
		case btnStart :
			break;
		case btnLoad :
			break;
		case btnContinue :
			if(target == btnContinue){
				var ref = saveMan.atASave();
				if(!ref.valid) return;
				with(_sprASaveInfo){
					var x = btnContinue.parent.left + btnContinue.left + btnContinue.width \ 2- .width \ 2;
					var y = btnContinue.parent.top +btnContinue.top - .height - 4;

					.set(0, -1, ref.realDate, ref.gameDate, ref.comment, "asave", ref.root, ref.comment_edit);
					.setupInfo();
					.setupThumb();

					._btn[0].visible = true;
					._btn[0].valid = false;

					.opacity = 0;
					.setBlendingEnvelope(255);
					.setMovingEnvelope(x, y-16, x, y, 2);
					.beginActivation(300);

					.onButtonEnter();
					.visible = true;
				}
			}
			break;
		case btnConfig :
			break;
		case btnBonus :
			break;
		case btnEnd :
			break;

		default :
			break;
		}
	}
	function onButtonLeave(target){
		if(target == btnContinue){
			_sprASaveInfo.visible = false;
			_sprASaveInfo.onButtonLeave();
		}
	}

	function onMouseDown(x, y, button, shift){
		if(button == mbRight && _enterBonus){
			leaveBonus();
		}
	}
	function onKeyDown(key, shift){
		if(key == VK_ESCAPE && _enterBonus){
			leaveBonus();
		}else{
			global.ChainItemBase.onKeyDown(key, shift);
		}
	}

	function enterBonus(time=300){
		_enterBonus = true;

		btnStart.hitThreshold = 256;
		btnContinue.hitThreshold = 256;
		btnLoad.hitThreshold = 256;
		btnConfig.hitThreshold = 256;
		btnBonus.hitThreshold = 256;
		btnEnd.hitThreshold = 256;
		btnAlbum.hitThreshold = 0;
		btnMusic.hitThreshold = 0;
		btnMemories.hitThreshold = 0;

		removeChainItemAll();
		addChainItem(btnAlbum);
		addChainItem(btnMusic);
		addChainItem(btnMemories);

		_grpBtn.flushActivation();
		_grpBtnBonus.flushActivation();

		_grpBtn.setMovingEnvelope(_ptGrp[0].x, _ptGrp[0].y, _ptGrp[0].x, _ptGrp[0].y+32, 2);
		_grpBtn.setBlendingEnvelope(0);
		_grpBtn.beginActivation(time);
		_grpBtnBonus.opacity = 0;
		_grpBtnBonus.setMovingEnvelope(_ptGrp[1].x, _ptGrp[1].y+32, _ptGrp[1].x, _ptGrp[1].y, 2);
		_grpBtnBonus.setBlendingEnvelope(255);
		_grpBtnBonus.beginActivation(time);
	}
	function leaveBonus(){
		_enterBonus = false;

		btnStart.hitThreshold = 0;
		btnContinue.hitThreshold = 0;
		btnLoad.hitThreshold = 0;
		btnConfig.hitThreshold = 0;
		btnBonus.hitThreshold = 0;
		btnEnd.hitThreshold = 0;
		btnAlbum.hitThreshold = 256;
		btnMusic.hitThreshold = 256;
		btnMemories.hitThreshold = 256;

		removeChainItemAll();
		addChainItem(btnContinue);
		addChainItem(btnStart);
		addChainItem(btnLoad);
		addChainItem(btnConfig);
		if(btnBonus.visible) addChainItem(btnBonus);
		addChainItem(btnEnd);

		_grpBtn.flushActivation();
		_grpBtnBonus.flushActivation();

		_grpBtn.opacity = 0;
		_grpBtn.setMovingEnvelope(_ptGrp[0].x, _ptGrp[0].y+32, _ptGrp[0].x, _ptGrp[0].y, 2);
		_grpBtn.setBlendingEnvelope(255);
		_grpBtn.beginActivation(300);
		_grpBtnBonus.setMovingEnvelope(_ptGrp[1].x, _ptGrp[1].y, _ptGrp[1].x, _ptGrp[1].y+32, 2);
		_grpBtnBonus.setBlendingEnvelope(0);
		_grpBtnBonus.beginActivation(300);
	}

	function endCancel(){
		//startMovingBg(0, 0, 500);
	}

	function hitThresholdSelectItems(threshold){
		for(var i=0;i<BTN_LIST.count;i++)
			this[BTN_LIST[i].id].hitThreshold = threshold;
	}
}

class EndScene extends Sprite, SceneBase{
	var _timer;
	var _voice;
	var _fPlay;

	function EndScene(win, par){
		Sprite(...);
		absolute = LAYER_END;

		loadImages("FRM_0501");
		setSizeToImageSize();

		opacity = 0;
		setBlendingEnvelope(255);
		beginActivation(300);
		visible = true;

		_timer = new Timer(callback, "");

		StopVoice(2000);
		StopEnvSe(, 2000);
		StopBgm(2000);
		StopSystemSound();

		var file = "";
		if(!CONFIG.muteSystem)
			file = PlaySystemVoice("ゲーム終了", false);

		_fPlay = false;
		if(file != ""){
			var head = file.substring(0, 2);
			_voice = new WaveSoundBuffer(this);
			_voice.open(file + ".ogg");
			with(_voice){
				var personalVol = CONFIG.voiceDetails[VCID_TO_INDEX[head]].volumeSyv;
				.volume2 = CONFIG.volSystem * personalVol * 100000;
				.volume = CONFIG.volMaster * 100000;
			}
			_voice.play();
			_fPlay = true;
		}else{
			_timer.interval = 3000;
			_timer.enabled = true;
		}

		setMode();

		win.addInputNotify(this);
	}
	function finalize(){
		_timer.enabled = false;
		invalidate _timer;
		invalidate _voice;

		win.removeInputNotify(this);
		global.Sprite.finalize();
	}

	function callback(){
		_timer.enabled = false;

		if(!valid) return;

		game.shutdown();
	}

	function action(ev){
		if(_fPlay && ev.target == _voice){
			_timer.interval = 2000;
			_timer.enabled = true;
		}
	}

	function onKeyDown(){
		close();
	}
	function onMouseDown(){
		close();
	}

	function close(){
		if(!valid) return;

		stopActivation();
		_timer.enabled = false;
		game.shutdown();
		valid = false;
	}
}
