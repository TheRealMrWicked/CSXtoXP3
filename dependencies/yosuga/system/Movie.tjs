
class MovieLayer extends VideoOverlay{
	var _owner;
	var _layer;
	function MovieLayer(win, par){
		super.VideoOverlay(...);

		_layer = new Layer(...);
		with(_layer){
			@if(__TRIAL__ == 0)
				.setSize(800, 600);
			@endif
			@if(__TRIAL__ != 0)
				.setSize(800, 600);
			@endif
			.setPos((WINDOW_WIDTH-.width)/2, (WINDOW_HEIGHT-.height)/2);
			.type = ltOpaque;
			.hitThreshold = 256;
			.absolute = LAYER_MOVIE;
			.visible = true;
		}

		mode = vomLayer;
		layer1 = _layer;

		_owner = null;
	}
	function finalize(){
		super.finalize();

		invalidate _layer;
	}

	function start(file, owner=null){
		if(Storages.isExistentStorage(file + ".mpg"))
			file += ".mpg";
		else if(Storages.isExistentStorage(file + ".wmv"))
			file += ".wmv";
		else if(Storages.isExistentStorage(file + ".flv"))
			file += ".flv";
		else
			return;

		open(file);

		if(numberOfAudioStream > 0){
		//サウンドがあるなら音量を設定する
			if(CONFIG.muteMaster == 1 || CONFIG.muteMovie == 1)
				audioVolume = 0;
			else
				audioVolume = int(100000 * CONFIG.volMaster * CONFIG.volMovie);
		}

		_owner = owner;

		pause = true;
		play();
		pause = false;
	}

	function onStatusChanged(status){
	//引数
	//"unload" : メディアが開かれてない
	//"play" : メディアは再生中である
	//"stop" : メディアは停止中である
	//"pause" : メディアは一時停止中である
		if(_owner != null){
			if(!isvalid _owner) return;

			var elm = %[];
			elm.type = "Movie.onStatusChanged";
			elm.status = status;
			elm.target = this;
			_owner.action(elm);
		}
	}
}

var MOVIE_OBJECT = null;
function PlayMovie(file, owner=null){
	if(MOVIE_OBJECT != null){
		MOVIE_OBJECT.stop();
		invalidate MOVIE_OBJECT;
	}

	MOVIE_OBJECT = new MovieLayer(win, win.baseLayer);
	MOVIE_OBJECT.start(file, owner);
}
function StopMovie(){
	if(MOVIE_OBJECT === null) return;

	MOVIE_OBJECT.stop();
	if(MOVIE_OBJECT === null) return;
	invalidate MOVIE_OBJECT;
	MOVIE_OBJECT = null;
}
function IsPlayMovie(){
	return (MOVIE_OBJECT != null);
}

