/*
	システム変数クラス
*/

class SystemRegister{
	var _file;			//セーブするファイル名

	//セーブされる情報
	var _newSaveNo;		//最新セーブ番号
	var _autoSave;		//オートセーブの有無
	var _readFlag;		//既読フラグ
	var _cgFlag;		//ＣＧフラグ
	var _globalFlag;	//広域フラグ
	var _config;		//コンフィグ設定

	//ゲームの一時的な状態を保存

	//CGモード
	var _cgModeShowPreview;

	//回想復帰用
	var _recollectChar;	//キャラ番号
	var _recollectPage;	//ページ番号
	var _recollectBtn;	//ボタンID

	//ロードセーブ画面を閉じたときのページ位置
	var _closeSaveMenuIndex;

	//コンフィグを閉じた時のページ
	var _closeConfigPage;

	var DEFINE_PARAM = [
		["muteMaster", 0], 
		["volMaster", 1.0], 
		["muteBgm", 0], 
		["volBgm", 0.5], 
		["muteSe", 0], 
		["volSe", 0.7], 
		["muteEnvSe", 0], 
		["volEnvSe", 0.7], 
		["muteVoice", 0], 
		["volVoice", 1.0], 
		["muteSystem", 0], 
		["volSystem", 1.0], 
		["muteMovie", 0], 
		["volMovie", 1.0], 
		["muteBgv", 0], 
		["volBgv", 1.0], 
		["muteSyv", 0], 
		["volSyv", 1.0], 

		["screenModeKeep", 1], 				//前回終了時の画面設定を保持する

		["fullScrren", 0], 					//フルスクリーン

		["windowZoom", WINDOW_ZOOM_PER], 	//ウィンドウ拡大率
		["windowRatio", WINDOWRATIO_16X9], 	//ウィンドウ比率

		["screenEffect", 1], 				//画面効果
											//[0:なし 1:通常]
		["screenEffectSpeed", 1.0], 		//演出速度(1.0で通常)

		["screenEffectSpeedSys", 1.0], 		//システム演出速度(1.0で通常)

		["windowDepth", 50], 
		["messageSpeed", 5], 

		["readSkip", 1], 					//既読スキップ
											//[0:全て 1:既読のみ]
		["readMessColor", 1], 				//既読メッセージの文字色変更
											//[0:しない 1:する]

		["lockSkip", 0], 					//選択肢後のスキップ解除
											//[0:解除 1:固定]
		["lockAuto", 0], 					//選択肢後のオート
											//[0:解除 1:固定]

		["eventCamera", 1], 				//イベントＣＧのカメラワーク
											//[0:無効 1:有効]

		["messageFlushOnClick", 1], 		//メッセージ出力中のクリック動作
											//[0:次のメッセージに進む 1:メッセージの出力を完了させる]

		["voiceStopOnClick", 0], 			//クリック時の音声制御
											//[0:再生 1:停止]

		["autoSpeed", 5000], 				//オート待機時間(ミリ秒)

		["mouseTracking", 1], 				//マウスカーソルの自動追尾
											//[0:しない 1:する]

		["triggerCounterShow", 1], 			//射精カウンター

		["echoVoice", 1], 					//エコーボイス切り替え
											//[0:しない 1:する]

		["selectFix", 0], 					//選択固定オプション
											//[0:固定無し 1以降:固定]

		["selectFix_finish1", 0], 			//選択固定オプション
											//[0:口内 1:顔射]
		["selectFix_finish2", 0], 			//選択固定オプション
											//[0:中出し 1:外出し]

		["routeGuide", 1], 					//ルートガイド
											//[0:表示しない 1:表示する]

		["fontType", 0], 					//フォントタイプ

		["systemMenuLock", 1], 				//システムメニューの表示固定

		//確認ダイアログ
		["confirmWindow", [
			1, // CONFIRM_OVERWRITE
			1, // CONFIRM_LOAD
			1, // CONFIRM_END
			1, // CONFIRM_TITLE
			1, // CONFIRM_DEFAULT
			1, // CONFIRM_CLEARREADFLAG
			1, // CONFIRM_SELECTJUMP
			1, // CONFIRM_COPY
			1, // CONFIRM_MOVE
			1, // CONFIRM_SWAP
			1, // CONFIRM_DELETE
			1  // CONFIRM_LOGJUMP
		]], 

		//個別音声設定（ここはゲーム毎に編集が必要）
		["voiceDetails", [
			//音声, 環境音声, システム音声
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:1, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0], 
			%[mute:0, volume:1.0, muteBgv:0, volumeBgv:1.0, muteSyv:0, volumeSyv:1.0]
		]], 

		//システム音声設定
		["systemVoice", 0], 

		//デバック用パラメータ
		["debugVisible", true], 
		["debugX", 0], 
		["debugY", 0], 
		["debugJump", "チュートリアル"], 
		["debugSearch", ""], 
		["debugEditerPath", ""], 
		["debugBuCenter", 0], 
		["debugSupExp", 1]
	];

	function SystemRegister(file){
		_file = file;

		_readFlag = new Flag(READ_FLAG_MAX);
		_cgFlag = new Flag(CG_FLAG_MAX);
		_globalFlag = new Flag(GLOBAL_FLAG_MAX);

		initialize();
		if(Storages.isExistentStorage(DATA_PATH + file)){
			load(file);
		}else{
			save(file);
		}

		_cgModeShowPreview = 1;

		_recollectChar = 0;
		_recollectPage = 0;
		_recollectBtn = 0;

		if(_newSaveNo != -1)
			_closeSaveMenuIndex = (_newSaveNo-1)\SAVEDATA_PAGE_NUM;
		else
			_closeSaveMenuIndex = 0;

		_closeConfigPage = 0;
	}
	function finalize(){
		invalidate _readFlag;
		invalidate _cgFlag;
		invalidate _globalFlag;
		invalidate _config;
	}

	function initialize(){
		_newSaveNo = -1;
		_autoSave = 0;

		clearReadFlag();
		clearCgFlag();
		clearGlobalFlag();

		_config = %[];

		initConfig();
	}

	function initConfig(){
		for(var i=0;i<DEFINE_PARAM.count;i++){
			var tag = DEFINE_PARAM[i][0];
			var atrb = typeof DEFINE_PARAM[i][1];
			if(atrb == "Object"){
				if(typeof DEFINE_PARAM[i][1].count == "undefined"){
				//これはDictionary
					_config[tag] = %[];
					(Dictionary.assignStruct incontextof _config[tag])(DEFINE_PARAM[i][1]);
				}else{
				//これはArray
					_config[tag] = [];
					_config[tag].assignStruct(DEFINE_PARAM[i][1]);
				}
			}else{
				_config[tag] = DEFINE_PARAM[i][1];
			}
		}
	}

	function load(file=""){
		if(file == "") file = _file;

		var temp = Scripts.evalStorage(DATA_PATH + file);
		_newSaveNo = temp[0];
		with(temp[1]){
			_readFlag.create(.readFlagNum);
			_readFlag.object().assign(.readFlagObj);
			_cgFlag.create(.cgFlagNum);
			_cgFlag.object().assign(.cgFlagObj);
			_globalFlag.create(.globalFlagNum);
			_globalFlag.object().assign(.globalFlagObj);
		}

		(Dictionary.assign incontextof _config)(temp[2]);
		//コンフィグの内容チェック
		for(var i=0;i<DEFINE_PARAM.count;i++){
			//定義タグが存在しない場合はデフォルト値を設定する
			if(_config[DEFINE_PARAM[i][0]] === void){
				for(var i=0;i<DEFINE_PARAM.count;i++){
					var tag = DEFINE_PARAM[i][0];
					var atrb = typeof DEFINE_PARAM[i][1];
					if(atrb == "Object"){
						if(typeof DEFINE_PARAM[i][1].count == "undefined"){
						//これはDictionary
							_config[tag] = %[];
							(Dictionary.assign incontextof _config[tag])(DEFINE_PARAM[i][1]);
						}else{
						//これはArray
							var ref = DEFINE_PARAM[i][1];
							_config[tag] = [];
							for(var j=0;j<ref.count;j++){
								var atrb = typeof ref[j];
								if(atrb == "Object"){
									if(typeof ref[j].count == "undefined"){
									//これはDictionary
										_config[tag][j] = %[];
										(Dictionary.assign incontextof _config[tag][j])(ref[j]);
									}else{
									//これはArray
										_config[tag][j] = [];
										_config[tag][j].assign(ref[j]);
									}
								}else{
									_config[tag][j] = DEFINE_PARAM[i][1];
								}
							}
						}
					}else{
						_config[tag] = DEFINE_PARAM[i][1];
					}
				}
			}
		}

		_autoSave = temp[3];
	}
	function save(file=""){
		var temp = [];

		//[0] : 最新セーブ番号
		//[1] : 各グローバルフラグ
		//[2] : コンフィグ設定
		temp[0] = _newSaveNo;
		temp[1] = %[];
		with(temp[1]){
			.readFlagNum = _readFlag.length();
			.readFlagObj = _readFlag.object();
			.cgFlagNum = _cgFlag.length();
			.cgFlagObj = _cgFlag.object();
			.globalFlagNum = _globalFlag.length();
			.globalFlagObj = _globalFlag.object();
		}
		temp[2] = _config;
		temp[3] = _autoSave;

		if(file == "") file = _file;

		@if(__FILE_CRYPT__ == 0)
			temp.saveStruct(DATA_PATH + file);
		@endif
		@if(__FILE_CRYPT__ == 1)
			temp.saveStruct(DATA_PATH + file, "z");
		@endif
	}

	function clearReadFlag(){_readFlag.clear();}
	function clearCgFlag(){_cgFlag.clear();}
	function clearGlobalFlag(){_globalFlag.clear();}
}
SystemRegister.CONFIRM_OVERWRITE		= 0;
SystemRegister.CONFIRM_LOAD				= 1;
SystemRegister.CONFIRM_END				= 2;
SystemRegister.CONFIRM_TITLE			= 3;
SystemRegister.CONFIRM_DEFAULT			= 4;
SystemRegister.CONFIRM_CLEARREADFLAG	= 5;
SystemRegister.CONFIRM_SELECTJUMP		= 6;
SystemRegister.CONFIRM_COPY				= 7;
SystemRegister.CONFIRM_MOVE				= 8;
SystemRegister.CONFIRM_SWAP				= 9;
SystemRegister.CONFIRM_DELETE			= 10;
SystemRegister.CONFIRM_LOGJUMP			= 11;

SystemRegister.WINDOWRATIO_16X9		= 0;
SystemRegister.WINDOWRATIO_4X3		= 1;

class SaveDataManager{
	var _saveFile = "saveMan.dat";
	var _obj = [];
	var _qsave;
	var _normalSaveNum = SAVEDATA_BOOK_MAX * SAVEDATA_PAGE_MAX * SAVEDATA_PAGE_NUM;

	function SaveDataManager(){
		_obj[0] = [];	//ノーマル
		_obj[1] = %[index:0, stack:0, buf:[]];	//クイック(セーブ用)
		_obj[2] = [];	//オート

		_qsave = new RingBuffer(QSAVEDATA_MAX);

		if(!load()){
			init();
			save();
		}
	}
	function finalize(){
		if(!isvalid this) return;

		invalidate _qsave;
		InvalidateArray(_obj);
		invalidate _obj;
	}

	function initNormal(){
		var ref = _obj[0];
		for(var book=0;book<SAVEDATA_BOOK_MAX;book++){
			ref[book] = %[bookname:"BOOK%02d".sprintf(book+1), pages:[]];
			for(var page=0;page<SAVEDATA_PAGE_MAX;page++){
				ref[book].pages[page] = %[pagename:"PAGE%02d".sprintf(page+1), data:[]];
				for(var index=0;index<SAVEDATA_PAGE_MAX;index++){
					ref[book].pages[page].data[index] = %[
						valid : false, 
						lock : false, 
						file : "", 
						gameDate : "", 
						realDate : "", 
						comment_edit : false, 
						comment : "", 
						root : 0
					];
				}
			}
		}
	}

	function init(){
		//----------------------------------------------
		initNormal();
		//----------------------------------------------
		_qsave.clear(%[valid:false, file:"", gameDate:"", realDate:"", comment:"", root:0]);
		//----------------------------------------------
		_obj[2][0] = %[];
		with(_obj[2][0]){
			.valid = false;
			.file = "";
			.gameDate = "";
			.realDate = "";
			.comment = "";
			.root = 0;
		}
		//----------------------------------------------
	}
	function load(){
		if(Storages.isExistentStorage(DATA_PATH + _saveFile)){
			_obj = Scripts.evalStorage(DATA_PATH + _saveFile);

			_qsave._index = _obj[1].index;
			_qsave._stack = _obj[1].stack;
			_qsave._buf.assign(_obj[1].buf);

			return true;
		}else{
			return false;
		}
	}
	function save(){
		_obj.saveStruct(DATA_PATH + _saveFile);

		_obj[1].index = _qsave._index;
		_obj[1].stack = _qsave._stack;
		_obj[1].buf.assign(_qsave._buf);

		@if(__FILE_CRYPT__ == 0)
			_obj.saveStruct(DATA_PATH + _saveFile);
		@endif
		@if(__FILE_CRYPT__ == 1)
			_obj.saveStruct(DATA_PATH + _saveFile, "z");
		@endif
	}

	function at(index=0){
		if(0 > index || index >= _normalSaveNum) return;

		var dic = getBookIndexFromIndex(index);

		return _obj[0][dic.book].pages[dic.page].data[dic.index];
	}

	function atBook(book=0){
		if(0 > book && book >= SAVEDATA_BOOK_MAX) return;

		return _obj[0][book];
	}
	function atPage(book=0, page=0){
		if(0 > book && book >= SAVEDATA_BOOK_MAX) return;
		if(0 > page && page >= SAVEDATA_PAGE_MAX) return;

		return _obj[0][book].pages[page];
	}

	function getBookIndexFromIndex(index){
		return %[
			 book : index \ SAVEDATA_PAGEDATA_MAX, 
			 page : (index % SAVEDATA_PAGEDATA_MAX) \ SAVEDATA_PAGE_NUM, 
			index : index % SAVEDATA_PAGE_NUM
		];
	}
	function getIndexFromBookIndex(book, page, index=0){
		return (book * SAVEDATA_PAGEDATA_MAX + page * SAVEDATA_PAGE_NUM + index);
	}

	function atQSave(index=0){
		return _qsave.get(index);
	}
	function qsaveIndex(){
		return _qsave.index;
	}
	function qsaveStack(){
		return _qsave.stack;
	}

	function atASave(){
		return _obj[2][0];
	}

	function setObj(obj, valid=true, file="", gameDate="", realDate="", comment="", root=0, comment_edit=false){
		with(obj){
			.valid = valid;
			.file = file;
			.gameDate = gameDate;
			.realDate = realDate;
			.comment_edit = comment_edit;
			.comment = comment;
			.root = root;
		}
	}
	function set(index, file="", gameDate="", realDate="", comment="", root=0, comment_edit=false){
		if(0 > index || index >= _normalSaveNum) return;

		var dic = getBookIndexFromIndex(index);

		setObj(_obj[0][dic.book].pages[dic.page].data[dic.index], true, file, gameDate, realDate, comment, root, comment_edit);
	}
	function setQSave(file="", gameDate="", realDate="", comment="", root=0){
		_qsave.add(%[valid:true, file:file, gameDate:gameDate, realDate:realDate, comment:comment, root:root]);
	}
	function setASave(file="", gameDate="", realDate="", comment="", root=0, comment_edit=false){
		setObj(_obj[2][0], true, file, gameDate, realDate, comment, root, comment_edit);
	}

	function reset(index){
		if(0 > index || index >= _normalSaveNum) return;

		var dic = getBookIndexFromIndex(index);

		setObj(_obj[0][dic.book].pages[dic.page].data[dic.index], false, "", "", "", "", 0, 0, false);
	}
	function resetQSave(){
		_qsave.clear(%[valid:false, file:"", gameDate:"", realDate:"", comment:"", root:0]);
	}
	function resetASave(){
		setObj(_obj[2][0], false, "", "", "", "", 0, 0, false);
	}

	function newestIndex(){
		var date = new Date();
		var array = [];
		for(var book=0;book<SAVEDATA_BOOK_MAX;book++){
			for(var page=0;page<SAVEDATA_PAGE_MAX;page++){
				for(var index=0;index<SAVEDATA_PAGE_NUM;index++){
					if(_obj[0][book].pages[page].data[index].valid){
						var buf = _obj[0][book].pages[page].data[index].realDate.split("_");
						date.parse(buf[0] + " " + buf[1]);
						array.add([date.getTime(), book * SAVEDATA_PAGEDATA_MAX + page * SAVEDATA_PAGE_NUM + index]);
					}
				}
			}
		}
		if(array.count == 0) return -1;
		if(array.count == 1) array[0][0];

		invalidate date;

		array.sort(function(a, b){return a[0] > b[0];}, true);

		return array[0][1];
	}

	function copy(srcIndex, dstIndex){
		if(srcIndex == dstIndex) return;

		var srcObj = at(srcIndex);
		var dstObj = at(dstIndex);
		var srcFilename = srcObj.file;
		var dstFilename = "save" + "%02d_%03d.bmp".sprintf(dstIndex\SAVEDATA_PAGEDATA_MAX+1, dstIndex%SAVEDATA_PAGEDATA_MAX+1);

		set(dstIndex, dstFilename, srcObj.gameDate, srcObj.realDate, srcObj.comment, srcObj.root, srcObj.comment_edit);

		Storages.copyFile(DATA_PATH + srcFilename, DATA_PATH + dstFilename, false);

		SetNewSaveNo(saveMan.newestIndex() + 1);
		SaveSystemRegister();
	}
	function move(srcIndex, dstIndex){
		if(srcIndex == dstIndex) return;

		var srcObj = at(srcIndex);
		var dstObj = at(dstIndex);
		var srcFilename = srcObj.file;
		var dstFilename = "save" + "%02d_%03d.bmp".sprintf(dstIndex\90+1, dstIndex%90+1);

		set(dstIndex, dstFilename, srcObj.gameDate, srcObj.realDate, srcObj.comment, srcObj.root, srcObj.comment_edit);

		Storages.copyFile(DATA_PATH + srcFilename, DATA_PATH + dstFilename, false);

		Storages.deleteFile(DATA_PATH + at(srcIndex).file);
		reset(srcIndex);

		save();

		//最新データを移動した場合は、最新データ情報も更新
		if(GetNewSaveNo() == srcIndex + 1){
			SetNewSaveNo(dstIndex + 1);
			SaveSystemRegister();
		}else{
			SetNewSaveNo(saveMan.newestIndex() + 1);
			SaveSystemRegister();
		}
	}

	function del(index){
		Storages.deleteFile(DATA_PATH + at(index).file);

		reset(index);
		save();

		//最新データを削除した場合は、最新データ情報も更新
		if(GetNewSaveNo() == index + 1){
			SetNewSaveNo(saveMan.newestIndex() + 1);
			SaveSystemRegister();
		}
	}
}
var saveMan = new SaveDataManager();

function ParameterInit(param){
	param.clear();
}

//コンフィグの音声再生のチェック
function CheckPlayVoice(name){
	//マスターミュートならダメ
	if(CONFIG.muteMaster) return false;
	//音声ミュートならダメ
	if(CONFIG.muteVoice) return false;

	var ok = false;
	if(VCID_TO_INDEX[name] !== void){
		ok = CONFIG.voiceDetails[VCID_TO_INDEX[name]].mute==0;
	}else{
		ok = CONFIG.voiceDetails[VCID_TO_INDEX["NP"]].mute==0;
	}

	return ok;
}

//コンフィグの環境音声再生のチェック
function CheckPlayBgv(name){
	//マスターミュートならダメ
	if(CONFIG.muteMaster) return false;
	//音声ミュートならダメ
	if(CONFIG.muteBgv) return false;

	var ok = false;
	if(VCID_TO_INDEX[name] !== void){
		ok = CONFIG.voiceDetails[VCID_TO_INDEX[name]].muteBgv==0;
	}else{
		ok = CONFIG.voiceDetails[VCID_TO_INDEX["NP"]].muteBgv==0;
	}

	return ok;
}

//コンフィグのシステム音声再生のチェック
function CheckPlaySystemVoice(name){
	//マスターミュートならダメ
	if(CONFIG.muteMaster) return false;
	//音声ミュートならダメ
	if(CONFIG.muteSyv) return false;

	var ok = false;
	if(VCID_TO_INDEX[name] !== void){
		ok = CONFIG.voiceDetails[VCID_TO_INDEX[name]].muteSyv==0;
	}else{
		ok = CONFIG.voiceDetails[VCID_TO_INDEX["NP"]].muteSyv==0;
	}

	return ok;
}

//キャラクター情報の初期化
function CharDataInit(){
	var csv = new CSVParser();
	csv.initStorage("charData.csv");

	var head = csv.getNextLine();

	var elm;
	while((elm = csv.getNextLine()) !== void){
		if(elm[0].charAt(0) == "#") continue;
		var id = CHAR_DATA.count;
		CHAR_DATA[id] = %[];
		for(var i=0;i<head.count;i++){
			CHAR_DATA[id][head[i]] = elm[i];
		}
	}

	invalidate csv;

	for(var i=0;i<CHAR_DATA.count;i++){
		global[CHAR_DATA[i].id] = int CHAR_DATA[i].index;

		BUID_TO_INDEX[CHAR_DATA[i].buid] = int CHAR_DATA[i].index;
		VCID_TO_INDEX[CHAR_DATA[i].vcid] = int CHAR_DATA[i].index;

		if(CHAR_DATA[i].name.length)
			NAME_TO_INDEX[CHAR_DATA[i].name] = int CHAR_DATA[i].index;
	}
}

//シーン間のつなぎなどのフェードイン・アウトなどで利用しましょう
var SPR_COVER = null;
function CreateSprCover(){
	SPR_COVER = new Sprite(win, win.baseLayer);
	with(SPR_COVER){
		.setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
		.hitThreshold = 256;
		.absolute = LAYER_COVER;
		.type = ltAlpha;
		.opacity = 255;
	}
}
function ResetSprCover(){
	if(SPR_COVER === null) return;

	invalidate SPR_COVER;
	SPR_COVER = null;
}

//現在選択されているフォントにサイズなどの情報を追加して返す
function GetFontFace(face){
	face = face.toUpperCase();

	switch(CONFIG.fontType){
	case 0 : face = "スーラ" + face; break;
	case 1 : face = "筑紫明朝" + face; break;
	case 2 : face = "ハミング" + face; break;
	case 3 : face = "ニューシネマ" + face; break;
	case 4 : face = "ロダンカトレア" + face; break;
	case 5 : face = "ロダンハッピー" + face; break;
	default : face = "スーラ" + face; break;
	}

	return face;
}

//==========================================================
//ラッパークラス
//==========================================================
function InitSystemRegister(){
	sysReg.initialize();
}
function GetNewSaveNo(){
	return sysReg._newSaveNo;
}
function SetNewSaveNo(v = -1){
	sysReg._newSaveNo = v;
}
function ChkAutoSave(){
	return sysReg._autoSave != 0;
}
function SetReadFlag(id, f){
	if(f)
		sysReg._readFlag.on(id);
	else
		sysReg._readFlag.off(id);
}
function ChkReadFlag(id){
	return sysReg._readFlag.check(id);
}
function SetCgFlag(id, f){
	if(f)
		sysReg._cgFlag.on(id);
	else
		sysReg._cgFlag.off(id);
}
function ChkCgFlag(id){
	return sysReg._cgFlag.check(id);
}
function SetGlobalFlag(id, f){
	if(f)
		sysReg._globalFlag.on(id);
	else
		sysReg._globalFlag.off(id);
}
function ChkGlobalFlag(id){
	return sysReg._globalFlag.check(id);
}
function ChkGlobalFlagOn(id){
	return sysReg._globalFlag.check(id);
}
function ChkGlobalFlagOff(id){
	return (sysReg._globalFlag.check(id) == false);
}
function IsGameClear(){
	return ChkGlobalFlagOn(1);
}

//==========================================================
//
//==========================================================
function GetConfigParam(id){
	if(sysReg._config[id] !== void)
		return sysReg._config[id];
}
function SetConfigParam(id, param){
	if(sysReg._config[id] !== void)
		return sysReg._config[id] = param;
}
function SaveSystemRegister(fDebugSave=true){
	if(fDebugSave){
		@if(__DEBUGMODE__)
			CONFIG.debugVisible = debug.visible;
			CONFIG.debugX = debug.left;
			CONFIG.debugY = debug.top;
			CONFIG.debugJump = debug.edtScenarioJump.text;
			CONFIG.debugSearch = debug.edtSearchSkip.text;
			CONFIG.debugBuCenter = debug.tglBuCenter.state;
			CONFIG.debugSupExp = debug.tglSupExp.state;
		@endif
	}
	sysReg.save();
}

function ReviceEffectSpeed(sSpeed){
	return int(sSpeed * sysReg._config.screenEffectSpeed);
}
function ReviceSystemSpeed(sSpeed){
	return ReviceEffectSpeed(...);
}


