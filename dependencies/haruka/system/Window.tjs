/*
	ウィンドウクラス
*/

class MainWindow extends Window{
	var inputNotify = [];	//入力を通知するクラス
	var _focus;				//通知するクラスのフィルタ
							// -1 : 通知中断
							//  0 : 全通知
							//Obj : そのオブジェクトのみ

	var _editControl=false;
	var _editControlTarget;

	//マウスカーソル自動消去
	var _mouseTimer;
	var _mouseMoveTime;
	var _mousePos;
	//マウスカーソル自動追尾
	var _mouseTrackingSpeed = 100;
	var _mouseTrackingTimer;
	var _mouseTrackingLinear;
	var _mouseTrackingStartTime;

	var _changeScreenTime;

	var _baseLayer;

	var _askClose;

	var _windowActivate = false;

	var _zoom = WINDOW_ZOOM_PER;
	var _zoomMin = WINDOW_ZOOM_MIN;
	var _zoomMax = WINDOW_ZOOM_MAX;

	var _resizeBeginArea = %[x:0, y:0, w:0, h:0];

	function MainWindow(){
		super.Window();

		//キャプション
		caption = global.GAME_CAPTION;
		//スタイル設定
		borderStyle = bsSizeable;
		innerSunken = false;
		showScrollBars = false;
		//クライアントサイズ調整
		setInnerSize(WINDOW_WIDTH, WINDOW_HEIGHT);

		//ウィンドウと同じサイズのプライマリレイヤ作成
		add(new Layer(this, null));
		with(primaryLayer){
			.focusable = true;
			.neutralColor = GetDefineColor("black");
			.joinFocusChain = false;
			.setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
			.setPos(0, 0);
			.fillRect(0, 0, .width, .height, 0);

			.visible = true;
		}

		_baseLayer = new Layer(this, primaryLayer);
		with(_baseLayer){
			.hasImage = false;
			.focusable = true;
			.neutralColor = GetDefineColor("black");
			.joinFocusChain = false;
			.setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
			.setPos(0, 0);
			.hitType = htMask;
			.hitThreshold = 0;
			.visible = true;
		}

		_changeScreenTime = 0;

		if(CONFIG.fullScreen){
			visible = true;
			changeScreenMode(true);
		}else{
			zoom = CONFIG.windowZoom;
			visible = true;
		}

		_mouseTimer = new Timer(mouseCallback, "");
		_mouseTimer.interval = 1000;
		_mouseTimer.enabled = true;
		_mouseMoveTime = System.getTickCount();
		_mousePos = new Point(-1, -1);

		_mouseTrackingTimer = new Timer(mouseTrackingCallback, "");
		_mouseTrackingTimer.interval = 10;
		_mouseTrackingLinear = new D3Linear();

		_focus = 0;

		registerExEvent();

		_askClose = true;
	}

	function finalize(){
		invalidate _mouseTimer;
		invalidate _mouseTrackingTimer;
		invalidate _mouseTrackingLinear;

		invalidate _baseLayer;

		super.finalize();
	}

	function onKeyDown(key, shift){
		if(_editControl) return;

		//画面モード切替 Alt+Enter
		if((key == VK_RETURN) && (shift & ssAlt)){
			if(fullScreen == true){
			//ウィンドウモードに戻す
				changeScreenMode(false);
			}else{
			//フルスクリーンモードにする
				changeScreenMode(true);
			}
			_changeScreenTime = System.getTickCount();
			return;
		}else if(key == VK_F4 && (shift & ssAlt)){
		//なにもしない
			return;
	@if(__DEBUGMODE__)
		}else if(key== VK_F12){
			debug.visible = !debug.visible;
		}else if(key== VK_A){
		}else if(key== VK_S){
		}else if(key== VK_D){
			if(typeof global.testFuncD != "undefined")
				testFuncD();
		}else if(key== VK_F){
			if(typeof global.testFuncF != "undefined")
				testFuncF();

			//CheckPRFontMargin();
		}else if(key== VK_Z){
		}else if(key== VK_X){
		}else if(key== VK_C){
		}else if(key== VK_B){
		}else if(key== VK_V){
		}else if(key== VK_M){
		}else if(key== VK_N){ 
		}else if(key== VK_UP){
		}else if(key== VK_DOWN){
		}else if(key== VK_LEFT){
		}else if(key== VK_RIGHT){
	@endif
		}else{
		}
		if(_editControl) return;

		//パッドの変換
		//※コメントはPSコントローラ
		switch(key){
		//△
		case VK_PAD1 : 		key = VK_RETURN; break;
		//○
		case VK_PAD2 : 		key = VK_ESCAPE; break;
		//×
		case VK_PAD3 : 		key = VK_F7; break;
		//■
		case VK_PAD4 : 		key = VK_F6; break;
		//L2
		case VK_PAD5 : 		key = VK_F5; break;
		//R2
		case VK_PAD6 : 		key = VK_CONTROL; shift |= ssCtrl; break;
		//L1
		case VK_PAD7 : 		key = VK_F1; break;
		//R1
		case VK_PAD8 : 		key = VK_F2; break;
		//Start
		case VK_PAD9 : 		key = VK_F4; break;
		//Select
		case VK_PAD10 : 	key = VK_F3; break;

		case VK_PADLEFT : 	key = VK_LEFT; break;
		case VK_PADRIGHT : 	key = VK_RIGHT; break;
		case VK_PADUP : 	key = VK_UP; break;
		case VK_PADDOWN : 	key = VK_DOWN; break;
		}

		dispatchInputNotify(%[type:"onKeyDown", key:key, shift:shift]);
	}

	//スクリーンモードの切り替え
	function changeScreenMode(fFullscreen){
		if(isChangeScreenModeEnable()){
		//スクリーンモードの連続切替を抑制するために、一定時間は切替えを無効にする。
			dm("画面モードを切り替えます。");
			if(fFullscreen == false){
			//ウィンドウモードに戻す
				try{
					zoom = CONFIG.windowZoom;
					fullScreen = false;

					//フルスクリーンから戻ってくるとキャプションのアイコンが消える場合があるので
					//非表示・再表示で再描画させる
					visible = false;
					visible = true;

					//ウィンドウ・プライマリレイヤのサイズを元に戻す
					//setInnerSize(WINDOW_WIDTH, WINDOW_HEIGHT);
					setZoom(_zoom);

					primaryLayer.setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
					baseLayer.setPos((WINDOW_WIDTH-baseLayer.width)/2, (WINDOW_HEIGHT-baseLayer.height)/2);

					CONFIG.fullScreen = 0;
				}catch{
					dm("ウィンドウモード化失敗");
				}
			}else{
			//フルスクリーンモードにする
				try{
					//画面比率に合わせてウィンドウ・プライマリレイヤのサイズを調整
					var size = AdjustFitSize(System.screenWidth, System.screenHeight, WINDOW_WIDTH, WINDOW_HEIGHT);
					var w, h;
					if(System.screenWidth == size.width){
						var t = System.screenHeight / System.screenWidth;
						w = WINDOW_WIDTH;
						h = WINDOW_WIDTH*t;
					}else{
						var t = System.screenWidth / System.screenHeight;
						w = WINDOW_HEIGHT*t;
						h = WINDOW_HEIGHT;
					}

					setInnerSize(w, h);
					primaryLayer.setSize(w, h);
					baseLayer.setPos((primaryLayer.width-baseLayer.width)/2, (primaryLayer.height-baseLayer.height)/2);

					fullScreen = true;

					CONFIG.fullScreen = 1;
				}catch{
					dm("フルスクリーンモード化失敗");
					CONFIG.fullScreen = 0;
				}
			}
			_changeScreenTime = System.getTickCount();

			dispatchInputNotify(%[type:"onChangeScreenMode"]);
		}
	}
	function isChangeScreenModeEnable(){
	//前回のスクリーンモードチェンジから一定時間経過したか
		return (System.getTickCount() - _changeScreenTime > 1000);
	}

	function setZoom(zoom){
		if(fullScreen) return;

		_zoom = zoom;
		CONFIG.windowZoom = _zoom;

		if(_zoom < _zoomMin) _zoom = _zoomMin;
		else if(_zoom > _zoomMax) _zoom = _zoomMax;

		var w = (WINDOW_WIDTH * _zoom) \ WINDOW_ZOOM_PER;
		var h = (WINDOW_HEIGHT * _zoom) \ WINDOW_ZOOM_PER;

		setInnerSize(w, h);

		super.setZoom(_zoom, WINDOW_ZOOM_PER);
	}

	function onKeyUp(key, shift){
		if(_editControl) return;
		dispatchInputNotify(%[type:"onKeyUp", key:key, shift:shift]);
	}

	function onMouseDown(x, y, button, shift){
		if(_editControl){
			if(!_editControlTarget.isMouseEnter()){
				_editControlTarget.leave();
				primaryLayer.focus();		//フォーカスをプライマリに戻す
				return;
			}
		}

		@if(__DEBUGMODE__)
			if(button == mbLeft && shift & ssShift){
				Clipboard.asText = "%d,%d".sprintf(primaryLayer.cursorX, primaryLayer.cursorY);
				dm("mousePos = " + Clipboard.asText);
				return;
			}
		@endif

		//フォーカスが設定されているときのみ配信する
		if(typeof _focus == "Object")
			dispatchInputNotify(%[type:"onMouseDown", x:x, y:y, button:button, shift:shift, window:true]);

		_mouseMoveTime = System.getTickCount();
	}

	function onMouseUp(x, y, button, shift){
		if(_editControl) return;

		//フォーカスが設定されているときのみ配信する
		if(typeof _focus == "Object")
			dispatchInputNotify(%[type:"onMouseUp", x:x, y:y, button:button, shift:shift]);

		_mouseMoveTime = System.getTickCount();
	}

	function onMouseWheel(shift, delta, x, y){
		dispatchInputNotify(%[type:"onMouseWheel", shift:shift, delta:delta, x:x, y:y]);
	}

	function onMouseMove(x, y, shift){
		if(_mousePos.x != x || _mousePos.y != y){
			_mousePos.set(x, y);
			_mouseMoveTime = System.getTickCount();
		}
	}

	function onResize(){
	}

	function onResizeCallback(){
	}

	function onCloseQuery(canclose){
		if(_askClose){
			if(inputNotify.count){
			//これはフォーカス設定無視で配信させる
				dispatchInputNotify(%[type:"onCloseQuery"], true);
				super.onCloseQuery(false);
			}else{
			//配信先がない場合は閉じる
				super.onCloseQuery(true);
			}
		}else{
			super.onCloseQuery(true);
		}
	}

	function onActivate(){
		_windowActivate = true;
		dispatchInputNotify(%[type:"onActivate"]);
	}
	function onDeactivate(){
		_windowActivate = false;
		dispatchInputNotify(%[type:"onDeactivate"]);
	}

	function action(ev){
		dispatchInputNotify(ev);
	}

	function mouseCallback(){
		if(System.getTickCount() - _mouseMoveTime > 3500){
			hideMouseCursor();
		}
	}

	function mouseTracking(x, y){
		if(_mouseTrackingTimer.enabled){
			_mouseTrackingTimer.enabled = false;
			var pt = _mouseTrackingLinear.pt(1.0);
			primaryLayer.setCursorPos(pt.x, pt.y);
		}

		var ptStart = new Point(primaryLayer.cursorX, primaryLayer.cursorY);
		var ptEnd = new Point(x, y);
		_mouseTrackingLinear.set(ptStart, ptEnd);
		_mouseTrackingStartTime = System.getTickCount();
		_mouseTrackingTimer.enabled = true;
	}
	function mouseTrackingCallback(){
		var t = (System.getTickCount() - _mouseTrackingStartTime) / _mouseTrackingSpeed;
		if(t >= 1.0){
			t = 1.0;
			_mouseTrackingTimer.enabled = false;
		}
		var pt = _mouseTrackingLinear.pt(t);
		primaryLayer.setCursorPos(pt.x, pt.y);
	}
	function flushMouseTracking(){
		if(!_mouseTrackingTimer.enabled) return;

		_mouseTrackingTimer.enabled = false;
		var pt = _mouseTrackingLinear.pt(1.0);
		primaryLayer.setCursorPos(pt.x, pt.y);
	}
	function isMouseTracking(){
		return _mouseTrackingTimer.enabled;
	}

	function addInputNotify(obj){
		inputNotify.add(obj);
	}

	function removeInputNotify(obj){
		if(obj == _focus)
			_focus = 0;
		inputNotify.remove(obj);
	}

	function setFocus(target=0){
		if(target == 0){
			_focus = 0;
		}else{
			var i;
			for(i=0;i<inputNotify.count;i++){
				if(inputNotify[i] == target){
					_focus = target;
					break;
				}
			}
			if(i == inputNotify.count)
				_focus = 0;
		}
	}
	function isFocus(target){
		switch(_focus){
		case 0: return true; break;
		case -1 : return false; break;
		default :
			if(_focus == target) return true;
		}
		return false;
	}

	property focus{
		getter(){return _focus;}
	}

	function dispatchInputNotify(ev=%[], ignoreFocus=false){
		for(var i=0;i<inputNotify.count;i++){
			if(!ignoreFocus){
				if(inputNotify[i] == this) continue;
				if(!isFocus(inputNotify[i])) continue;
			}
			switch(ev.type){
			case "onKeyDown" :
				inputNotify[i].onKeyDown(ev.key, ev.shift); break;
			case "onKeyUp" :
				inputNotify[i].onKeyUp(ev.key, ev.shift); break;
			case "onMouseWheel" :
				inputNotify[i].onMouseWheel(ev.shift, ev.delta, ev.x, ev.y, true); break;
			case "onMouseMove" :
				inputNotify[i].onMouseMove(ev.x, ev.y, ev.shift, true); break;
			case "onMouseDown" :
				if(!_editControl) inputNotify[i].onMouseDown(ev.x, ev.y, ev.button, ev.shift, true);
				break;
			case "onMouseUp" :
				if(!_editControl) inputNotify[i].onMouseUp(ev.x, ev.y, ev.button, ev.shift);
				break;
			default : 
				inputNotify[i].action(ev);
				break;
			}
		}
	}

	function editControlEnter(target){
		_editControl = true;
		_editControlTarget = target;
	}
	function editControlLeave(){
		_editControl = false;
		_editControlTarget = void;
	}

	function onMoveSizeBegin(){
		_resizeBeginArea.x = left;
		_resizeBeginArea.y = top;
		_resizeBeginArea.w = width;
		_resizeBeginArea.h = height;
	}
	function onMoveSizeEnd(){
		if(
			_resizeBeginArea.w != innerWidth ||
			_resizeBeginArea.h != innerHeight
		){
			setZoom((innerWidth * WINDOW_ZOOM_PER)\WINDOW_WIDTH);
			dispatchInputNotify(%[type:"onMoveSizeEnd"]);
		}
		//caption = global.GAME_CAPTION;
	}
	function onResizing(rect){
		var borderW = width - innerWidth;
		var borderH = height - innerHeight;
		var inW, inH;
		var ratio;
		switch(rect.type){
		case 3 : 
		case 6 : 
			inW = int (innerHeight * (WINDOW_WIDTH / WINDOW_HEIGHT));
			inH = rect.h - borderH;

			ratio = (inH * WINDOW_ZOOM_PER) \ WINDOW_HEIGHT;
			ratio = (ratio \ WINDOW_ZOOM_PER_FILTER) * WINDOW_ZOOM_PER_FILTER;

			inW = (WINDOW_WIDTH * ratio) \ WINDOW_ZOOM_PER;
			inH = (WINDOW_HEIGHT * ratio) \ WINDOW_ZOOM_PER;
			break;
		default : 
			inW = rect.w - borderW;
			inH = int (innerWidth * WINDOW_ASPECT);

			ratio = (inW * WINDOW_ZOOM_PER) \ WINDOW_WIDTH;
			ratio = (ratio \ WINDOW_ZOOM_PER_FILTER) * WINDOW_ZOOM_PER_FILTER;

			inW = (WINDOW_WIDTH * ratio) \ WINDOW_ZOOM_PER;
			inH = (WINDOW_HEIGHT * ratio) \ WINDOW_ZOOM_PER;

			break;
		}

		if(ratio < _zoomMin){
			inW = (WINDOW_WIDTH * _zoomMin) \ WINDOW_ZOOM_PER;
			inH = (WINDOW_HEIGHT * _zoomMin) \ WINDOW_ZOOM_PER;
		}
		if(ratio >= _zoomMax){
			inW = (WINDOW_WIDTH * _zoomMax) \ WINDOW_ZOOM_PER;
			inH = (WINDOW_HEIGHT * _zoomMax) \ WINDOW_ZOOM_PER;
		}

		rect.w = inW;
		rect.h = inH;

		rect.w += borderW;
		rect.h += borderH;

		switch(rect.type){
		case 1 : //左
			rect.x = (_resizeBeginArea.x+_resizeBeginArea.w) - rect.w;
			rect.y = (_resizeBeginArea.y+_resizeBeginArea.h\2) - rect.h\2;
			break;
		case 2 : //右
			rect.x = _resizeBeginArea.x;
			rect.y = (_resizeBeginArea.y+_resizeBeginArea.h\2) - rect.h\2;
			break;
		case 3 : //上
			rect.x = (_resizeBeginArea.x+_resizeBeginArea.w\2) - rect.w\2;
			rect.y = (_resizeBeginArea.y+_resizeBeginArea.h) - rect.h;
			break;
		case 4 : //左上
			rect.x = (_resizeBeginArea.x+_resizeBeginArea.w) - rect.w;
			rect.y = (_resizeBeginArea.y+_resizeBeginArea.h) - rect.h;
			break;
		case 5 : //右上
			rect.x = _resizeBeginArea.x;
			rect.y = (_resizeBeginArea.y+_resizeBeginArea.h) - rect.h;
			break;
		case 6 : //下
			rect.x = (_resizeBeginArea.x+_resizeBeginArea.w\2) - rect.w\2;
			rect.y = _resizeBeginArea.y;
			break;
		case 7 : //左下
			rect.x = (_resizeBeginArea.x+_resizeBeginArea.w) - rect.w;
			rect.y = _resizeBeginArea.y;
			break;
		case 8 : //右下
			rect.x = _resizeBeginArea.x;
			rect.y = _resizeBeginArea.y;
			break;
		}

		//caption = "size : %d %%".sprintf((inW*100)\WINDOW_WIDTH);

		return true;
	}

	function onMaximizeQuery(){
		setZoom(WINDOW_ZOOM_PER);
		dispatchInputNotify(%[type:"onMaximizeQuery"]);

		return true;
	}

	property zoom{
		setter(v){_zoom = v; setZoom(v);}
		getter(){return _zoom;}
	}

	property askClose{
		setter(v){_askClose = v;}
		getter(){return _askClose;}
	}

	property baseLayer{
		getter(){return _baseLayer;}
	}

	property activate{
		getter(){return _windowActivate;}
	}
}

class InputNotifyBase{
	function who(){return "InputNotifyBase";}

	//入力通知（必要なところをオーバーライド）
	function onClick(x, y){return 0;}

	function onMouseDown(x, y, button, shift){return 0;}
	function onMouseUp(x, y, button, shift){return 0;}
	function onMouseMove(x, y, shift){return 0;}
	function onMouseEnter(){return 0;}
	function onMouseLeave(){return 0;}
	function onMouseWheel(shift, delta, x, y){return 0;}

	function onKeyDown(key, shift){return 0;}
	function onKeyUp(key, shift){return 0;}
	function onKeyPress(key,process=true){return 0;}

	function action(ev){return 0;}

	function onCloseQuery(canclose){
		return canclose;
	}
}
