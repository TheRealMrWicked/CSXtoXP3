
class ActionPropBase{
	var _target;
	var _prop;

	var _init, _term;
	var _fEndInit;	//終了時に初期値に戻すかどうか
					//0 : 停止した状態を保持
					//1 : 初期値に戻す
					//2 : 終端値に設定する

	var _startTime;	//開始時間
	var _lifeTime;	//生存時間
	var _cycle, _cycleBase;
	var _count;
	var _fLoop;

	function ActionPropBase(target, prop, elm){
		_target = target;
		_prop = prop;

        if (typeof target[prop] != "undefined") {
			_init = target[prop];	//初期値を記録
		}
		_term = _init;

		_fEndInit = false;
		if(elm.endInit !== void) _fEndInit = elm.endInit;

		_startTime = elm.startTime;

		//更新時間を演出速度設定で補正
		_cycleBase = int(elm.cycle);
		_cycle = ReviceEffectSpeed(_cycleBase);

		_count = 1;
		if(elm.count === void){
		//ループなし
			_fLoop = 0;
			_lifeTime = _cycle;
		}else if(elm.count < 0){
		//無限ループ
			_fLoop = 1;
			_lifeTime = _cycle;
		}else{
		//回数
			_lifeTime = elm.cycle * elm.count;
			_count = elm.count;
		}
	}

	function doAction(now){
		_cycle = ReviceEffectSpeed(_cycleBase);
		_lifeTime = _cycle * _count;
		return true;
	}

	function ratio(now){
		if(_cycle == 0) return 1.0;

		if(_fLoop || _count >= 2){
			return ((now-_startTime) % _cycle) / _cycle;
		}else{
			var t = real(now-_startTime) / _cycle;
			if(t > 1.0) t = 1.0;
			else if(t < 0.0) t = 0.0;
			return t;
		}
	}

	function stop(){
		if(_fEndInit == 1){
			_target[_prop] = _init;
		}else if(_fEndInit == 2){
			_target[_prop] = _term;
		}
	}

	function isEnd(now){
		//ループ指定時は終了しない
		if(_fLoop != 0) return false;

		if(now > _startTime + _lifeTime){
		//終了
			stop();
			return true;
		}else{
		//継続
			return false;
		}
	}

	//初期値を現在の値で再初期化する
	function refreshInit(){
        if (typeof _target[_prop] != "undefined") {
			_init = _target[_prop];	//初期値を記録
		}
	}

	property loop{
		getter(){return _fLoop;}
	}
}

//１次元移動
class LinearAction extends ActionPropBase{
	var _linear;
	function LinearAction(target, prop, elm){
		super.ActionPropBase(...);
		_term = int(elm.from);

		var accel = 0;
		if(elm.accel !== void) accel = int(elm.accel);

		_linear = new Linear(_init, elm.from, accel);
	}

	function doAction(now){
		super.doAction(now);

		var t = ratio(now);

		var pt = _linear.pt(t);

		_target[_prop] = pt;

		return isEnd(now);
	}
}

//１次元移動２
class LinearFrameAction extends ActionPropBase{
	var _linear;
	function LinearFrameAction(target, prop, elm){
		super.ActionPropBase(...);
		_term = int(elm.from);

		var accel = 0;
		if(elm.accel !== void) accel = int(elm.accel);

		_linear = new LinearFrame(elm.path, accel);
	}

	function doAction(now){
		super.doAction(now);

		var t = ratio(now);

		var pt = _linear.pt(t);

		_target[_prop] = pt.x;

		return isEnd(now);
	}
}

//波形
class WaveAction extends ActionPropBase{
	var _to, _from;
	var _min, _max;
	var _width;
	var _startAngle;
	function WaveAction(target, prop, elm){
		super.ActionPropBase(...);

		_width = 50;
		if(elm.width !== void) _width = int(elm.width);
		_min = -_width / 2;
		_max = _width / 2;

		_to = 0;
		if(elm.to !== void) _to = int(elm.to);
		_from = 360;
		if(elm.from !== void) _from = int(elm.from);

		//終端値
		var rad = _to + (_from-_to)*1.0;
		rad = (Math.PI * rad)/180.0;
		_term = (_max - _min) * Math.sin(rad);

		if(elm.startAngle !== void)
			_startAngle = elm.startAngle;
		else
			_startAngle = 0;
	}

	function doAction(now){
		super.doAction(now);

		var t = ratio(now);

		var rad;
		rad = _to + (_from-_to)*t + _startAngle;
		if(rad > _from)
			rad = rad - _from + _to;
		rad %= 360;
		rad = (Math.PI * rad)/180.0;

		var v = (_max - _min) * Math.sin(rad);
		_target[_prop] = _init + v;

		return isEnd(now);
	}
}

//ランダム
class RandomAction extends ActionPropBase{
	var _width;		//揺れ幅

	var _updateTime;
	var _updateDelay;

	function RandomAction(target, prop, elm){
		super.ActionPropBase(...);

		_width = 0;
		if(elm.width !== void) _width = int(elm.width);

		_updateTime = _startTime;
		_updateDelay = 0;
		if(elm.delay !== void) _updateDelay = int(elm.delay);
	}

	function doAction(now){
		super.doAction(now);

		if(now > _updateTime + _updateDelay){
			var v;
			if(_width)
				v = random(_width) - _width / 2;
			else
				v = 0;

			_target[_prop] = _init + v;

			_updateTime += _updateDelay;
		}

		return isEnd(now);
	}
}

//ワールド座標を操作する
class WorldMoveAction extends ActionPropBase{
	var _linear;

	function WorldMoveAction(target, prop, elm){
		super.ActionPropBase(...);

		var start = new Point(target.world.x, target.world.y, target.world.z);
		var end = new Point(target.world.x, target.world.y, target.world.z);

		//elm.mx, elm.myが設定されていた場合は相対移動
		if(elm.mx !== void)
			end.x = start.x + int(elm.mx);
		if(elm.my !== void)
			end.y = start.y + int(elm.my);

		//elm.x, elm.yが設定されていた場合は絶対移動
		//両方設定されていた場合は絶対移動が優先される
		if(elm.x !== void)
			end.x = int(elm.x);
		if(elm.y !== void)
			end.y = int(elm.y);

		var accel = 2;
		if(elm.accel !== void) accel = int(elm.accel);
		_linear = new D3Linear(start, end, accel);
	}

	function doAction(now){
		super.doAction(now);

		var t = ratio(now);

		var pt = _linear.pt(t);
		_target.world.set(pt);

		return isEnd(now);
	}

	function stop(){
		if(_fEndInit == 1){
			_target.world.set(_linear._start);
		}else if(_fEndInit == 2){
			_target.world.set(_linear._end);
		}
	}
}

class ActionSequense{
	var _target;
	var _action = [];
	var _world;

	//-------------------------
	//ロード処理に必要
	var _elm;

	function ActionSequense(elm){
		_elm = %[];
		(Dictionary.assign incontextof _elm)(elm);

		_target = elm.target;
		if(typeof _target["world"] != "undefined"){
		//ワールド座標を保持
			_world = new Point(_target["world"]);
		}

		var func = Scripts.eval(elm.action);
		func(this, elm);
	}
	function finalize(){
		InvalidateArray(_action);
		invalidate _action;
	}

	function add(prop, handle, elm){
		_action[_action.count] = new handle(elm.target, prop, elm);
	}

	function doAction(now){
		if(!isvalid _target) return true;

		var fEnd = true;
		for(var i=0;i<_action.count;i++)
			fEnd &= _action[i].doAction(now);

		return fEnd;
	}

	function stop(){
		if(!isvalid _target) return;

		for(var i=0;i<_action.count;i++)
			_action[i].stop();

		InvalidateArray(_action);
		_action.clear();
	}

	function isLoop(){
		if(!isvalid _target) return false;

		for(var i=0;i<_action.count;i++)
			if(_action[i].loop) return true;

		return false;
	}

	function refreshInit(){
		for(var i=0;i<_action.count;i++)
			_action[i].refreshInit();

		if(typeof _target["world"] != "undefined"){
		//ワールド座標を保持
			invalidate _world;
			_world = new Point(_target["world"]);
		}
	}
}

class ActionList{
	var _obj;		//アクションの終了を通知するオブジェクト
	var _list = [];

	function ActionList(obj = null){
		_obj = obj;
	}
	function finalize(){
		InvalidateArray(_list);
		invalidate _list;
	}

	function add(elm, flush=false){
		if(isAction(elm.target)){
		//現在アクション中なら停止させる
			stopAction(elm.target);
		}
		_list[_list.count] = new ActionSequense(elm);

		if(flush) //すぐに完了させる(スキップ用対処)
			_list[_list.count-1].stop();
	}

	function doAction(now){
		for(var i=_list.count-1;i>=0;i--){
			var fEnd = _list[i].doAction(now);

			if(fEnd){
			//アクションが終了したならリストから消す
				if(_obj != null) _obj.onEndAction(_list[i]._target);
				invalidate _list[i];
				_list.erase(i);
			}
		}
	}

	function stopAction(target=null){
		if(target === null){
		//全部止める
			for(var i=_list.count-1;i>=0;i--){
				_list[i].stop();
				if(_obj != null) _obj.onEndAction(_list[i]._target);
			}
			InvalidateArray(_list);
			_list.clear();
		}else{
		//個別に止める
			for(var i=_list.count-1;i>=0;i--){
				if(_list[i]._target == target){
					_list[i].stop();
					if(_obj != null) _obj.onEndAction(_list[i]._target);
					invalidate _list[i];
					_list.erase(i);
				}
			}
		}
	}

	function sequence(target){
		for(var i=_list.count-1;i>=0;i--){
			if(_list[i]._target == target){
				return _list[i];
			}
		}
		return void;
	}

	function isAction(target){
		for(var i=_list.count-1;i>=0;i--){
			if(_list[i]._target == target){
				return true;
			}
		}
		return false;
	}

	property count{
		getter(){ return _list.count; }
	}
}

//-------------------------------------------------------------------
//id
//action
//cycle
function ActionAdvMove(seq, elm){
//キャラ移動
//x, y, mx, my, accel
	seq.add("world", WorldMoveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, x:elm.x, y:elm.y, mx:elm.mx, my:elm.my, accel:elm.accel, endInit:2]);
}
function ActionAdvMoveWave(seq, elm){
//縦に揺れながらキャラ移動
//x, y, mx, my, accel
	seq.add("world", WorldMoveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, x:elm.x, y:elm.y, mx:elm.mx, my:elm.my, accel:elm.accel, endInit:2]);
	seq.add("wtop", WaveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.height, to:0, from:360*elm.count, endInit:2]);
}
function ActionAdvMoveFadeOut(seq, elm){
//x, y, mx, my, accel
	seq.add("world", WorldMoveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, x:elm.x, y:elm.y, mx:elm.mx, my:elm.my, accel:elm.accel]);
	seq.add("opacity", LinearAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, from:0]);
}
function ActionAdvMoveFadeIn(seq, elm){
//x, y, mx, my, accel
	seq.add("world", WorldMoveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, x:elm.x, y:elm.y, mx:elm.mx, my:elm.my, accel:elm.accel]);
	seq.add("opacity", LinearAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, from:255]);
}
function ActionAdvMoveWaveFadeOut(seq, elm){
//キャラ移動
//x, y, mx, my, accel
	seq.add("world", WorldMoveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, x:elm.x, y:elm.y, mx:elm.mx, my:elm.my, accel:elm.accel, endInit:2]);
	seq.add("wtop", WaveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.height, to:0, from:360*elm.count, endInit:2]);
	seq.add("opacity", LinearAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, from:0]);
}
function ActionAdvMoveWaveFadeIn(seq, elm){
//キャラ移動
//x, y, mx, my, accel
	seq.add("world", WorldMoveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, x:elm.x, y:elm.y, mx:elm.mx, my:elm.my, accel:elm.accel, endInit:2]);
	seq.add("wtop", WaveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.height, to:0, from:360*elm.count, endInit:2]);
	seq.add("opacity", LinearAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, from:255]);
}
function ActionAdvFrown(seq, elm){
//八の字カーブ
//width, height, count
	var paramH = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle/2, width:elm.height, to:0, from:360, count:elm.count*2, endInit:1];
	var paramW = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.width, to:0, from:360, count:elm.count, endInit:1];
	if(elm.world !== void){
		seq.add("wtop", WaveAction, paramH);
		seq.add("wleft", WaveAction, paramW);
	}else{
		seq.add("top", WaveAction, paramH);
		seq.add("left", WaveAction, paramW);
	}
}
function ActionAdvWave(seq, elm){
//
//width, height, count
	var paramH = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.height, to:0, from:360, count:elm.count, endInit:1];
	var paramW = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.width, to:0, from:360, count:elm.count, endInit:1];
	if(elm.world !== void){
		seq.add("wtop", WaveAction, paramH);
		seq.add("wleft", WaveAction, paramW);
	}else{
		seq.add("top", WaveAction, paramH);
		seq.add("left", WaveAction, paramW);
	}
}
function ActionAdvBow(seq, elm){
//お辞儀
//width, count
	var param = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.height, to:0, from:180, count:elm.count, endInit:1];
	if(elm.world !== void){
		seq.add("wtop", WaveAction, param);
	}else{
		seq.add("top", WaveAction, param);
	}
}
function ActionAdvJump(seq, elm){
//ジャンプ
//width, count
	var param = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.height, to:180, from:360, count:elm.count, endInit:1];
	if(elm.world !== void){
		seq.add("wtop", WaveAction, param);
	}else{
		seq.add("left", WaveAction, param);
	}
}
function ActionAdvShake(seq, elm){
//横揺れ
//width, count
	var param = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.width, to:0, from:360, count:elm.count, endInit:1];
	if(elm.world !== void)
		seq.add("wleft", WaveAction, param);
	else
		seq.add("left", WaveAction, param);
}
function ActionAdvHop(seq, elm){
//跳ね回る
//width, count
	var paramH = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle/4, width:elm.height, to:180, from:360, startAngle:elm.startAngle, count:elm.count*4, endInit:1];
	var paramW = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.width, to:0, from:360, startAngle:elm.startAngle, count:elm.count, endInit:1];
	if(elm.world !== void){
		seq.add("wtop", WaveAction, paramH);
		seq.add("wleft", WaveAction, paramW);
	}else{
		seq.add("top", WaveAction, paramH);
		seq.add("left", WaveAction, paramW);
	}
}
function ActionAdvRandomMove(seq, elm){
//width, height, count
	var paramH = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.height, delay:50, count:elm.count, endInit:1];
	var paramW = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.width, delay:50, count:elm.count, endInit:1];
	if(elm.world !== void){
		seq.add("wtop", RandomAction, paramH);
		seq.add("wleft", RandomAction, paramW);
	}else{
		seq.add("top", RandomAction, paramH);
		seq.add("left", RandomAction, paramW);
	}
}

//Spriteオブジェクト　操作アクション
//揺れ
function ActionWave(seq, elm){
	seq.add("x", WaveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.width, to:GetElm(elm.to), from:GetElm(elm.from, 360), count:elm.count, endInit:1]);
	seq.add("y", WaveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.height, to:GetElm(elm.to), from:GetElm(elm.from, 360), count:elm.count, endInit:1]);
}
function ActionShock(seq, elm){
//ガタガタ
//width
//height
//delay
	seq.add("x", RandomAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, count:elm.count, width:elm.width, delay:25, endInit:1]);
	seq.add("y", RandomAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, count:elm.count, width:elm.height, delay:25, endInit:1]);
}
function ActionShock2(seq, elm){
//ガタガタ
//width
//height
//delay
	var accel = GetElm(elm.accel, 2);
	var relay = GetElm(elm.relay, 12);
	var wh = -elm.width \ 2;
	var hh = -elm.height \ 2;
	var zh = -elm.zoom \ 2;
	var xPath = [0, 0, 0];
	var yPath = [0, 0, 0];
	var zPath = [-BG_RANGE_MAX, 0, 0];
	for(var i=0;i<relay;i++){
		switch(i % 4){
		case 0 : 
			xPath.adds(wh, 0, 0);
			yPath.adds(hh+random(elm.height), 0, 0);
			break;
		case 1 : 
			xPath.adds(wh+int(elm.width), 0, 0);
			yPath.adds(hh+random(elm.height), 0, 0);
			break;
		case 2 : 
			xPath.adds(wh+random(elm.width), 0, 0);
			yPath.adds(hh, 0, 0);
			break;
		case 3 : 
			xPath.adds(wh+random(elm.width), 0, 0);
			yPath.adds(hh+int(elm.height), 0, 0);
			break;
		default :
			break;
		}
		zPath.adds(-BG_RANGE_MAX+zh+random(elm.zoom), 0, 0);
	}
	xPath.adds(0, 0, 0);
	yPath.adds(0, 0, 0);
	zPath.adds(-BG_RANGE_MAX, 0, 0);
	seq.add("x", LinearFrameAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, count:elm.count, path:xPath, accel:accel, delay:25, endInit:1]);
	seq.add("y", LinearFrameAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, count:elm.count, path:yPath, accel:accel, delay:25, endInit:1]);
	seq.add("z", LinearFrameAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, count:elm.count, path:zPath, accel:accel, delay:25, endInit:1]);
}
function ActionQuake(seq, elm){
//地震
//cycle : 一回の周期
//count : 回数
//width : 横揺れ幅
//height: 縦揺れ幅
	seq.add("x", WaveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.width, to:0, from:360, loop:elm.loop, endInit:1, count:elm.count]);
	seq.add("y", RandomAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.height, delay:50, loop:elm.loop, endInit:1, count:elm.count]);
}
function ActionMove(seq, elm){
//移動
//cycle : 一回の周期
//count : 回数
//width : 横揺れ幅
//height: 縦揺れ幅
	seq.add("left", LinearAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, from:elm.mx, accel:elm.accel, endInit:2]);
	seq.add("top", LinearAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, from:elm.my, accel:elm.accel, endInit:2]);
}
//拡大（ぼよんぼよん）
function ActionZoomWave(seq, elm){
	seq.add("zoomx", WaveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:GetElm(elm.zoomx), to:GetElm(elm.to), from:GetElm(elm.from, 360), count:elm.count, endInit:1]);
	seq.add("zoomy", WaveAction, %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:GetElm(elm.zoomy), to:GetElm(elm.to), from:GetElm(elm.from, 360), count:elm.count, endInit:1]);
}
function ActionHop(seq, elm){
//跳ね回る
//width, count
	var paramH = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle/4, width:elm.height, to:180, from:360, startAngle:elm.startAngle, count:elm.count*4, endInit:1];
	var paramW = %[target:elm.target, startTime:elm.startTime, cycle:elm.cycle, width:elm.width, to:0, from:360, startAngle:elm.startAngle, count:elm.count, endInit:1];
	seq.add("top", WaveAction, paramH);
	seq.add("left", WaveAction, paramW);
}
