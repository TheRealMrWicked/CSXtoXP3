/*
	シナリオ制御クラス
	KAGParserからの派生
*/

class ScController extends KAGParser
{
	var tagHandle;		//タグハンドラ群
	var timer;
	var timeOutTimer;

	var _interrupt;		//中断中

	var _macros = %[];

	var waitUntil = %[];	//停止されたシナリオを再開するトリガ

	var isCallBackEnter;		//コールバック処理中か

	function ScController(handle){
		super.KAGParser();
		ignoreCR = true;
		processSpecialTags = true;

		tagHandle = handle;

		timer = new Timer(callback, "");
		timer.interval = 50;
		timer.enabled = false;

		timeOutTimer = new Timer(onTimeOut, "");
		timeOutTimer.enable = false;

		isCallBackEnter = false;
	}

	function finalize(){
		invalidate timer;
		invalidate timeOutTimer;
	}

	/*
		タグ解析
		タグを一つずつ取得して処理する。
	*/
	function callback(){
		if(isCallBackEnter) return;
		isCallBackEnter = true;

		while(!_interrupt){
			//タグを一つ取得
			var tag = getNextTag();

			if(tag === void){
			//シナリオ終端
				dm("シナリオ終端に到達しました");
				onTag(%[tagname:"terminate"]);
				stop();
				return;
			}

			//取得したタグの処理
			var ret = onTag(tag);

			if(ret == taghandler_getcontinue){
			//続けて次のタグを取得する
				timer.interval = 0;
				continue;
			}else if(ret == taghandler_end){
			//タグの取得を終了して、処理を吉里吉里に戻す
				timer.interval = 10;
				break;
			}
		}
		isCallBackEnter = false;
	}

	//タグ処理
	function onTag(elm){
		var ret = 0;
		var tagname = elm.tagname;
		var func = tagHandle[tagname];
		if(func !== void){
			ret = func(elm);
		}else{
		//不明なタグ
			dm("不明なタグです-"+elm.tagname);
		}
		return ret;
	}

	//コールバック開始
	function start(){
		timer.enabled = true;
	}

	//コールバック停止
	function stop(){
		timer.enabled = false;
	}

	//待機
	function wait(until){
		if(until === void) return;

		stop();
		(Dictionary.assign incontextof waitUntil)(until);
	}

	function waitTimeOut(until, time){
		if(time == 0) time = 1;
		stop();
		(Dictionary.assign incontextof waitUntil)(until);

		timeOutTimer.interval = time;
		timeOutTimer.enabled = true;
	}

	function onTimeOut(){
		timeOutTimer.enabled = false;
		trigger("timeout");
	}

	function trigger(name){
		var func = waitUntil[name];
		if(func !== void){
			start();
			(Dictionary.clear incontextof waitUntil)();
			return true;
		}
		return false;
	}

	function isTrigger(name){
		var func = waitUntil[name];
		if(func !== void) return true;
		else return false;
	}

	function loadMacro(file){
		loadScenario(file);
		while(getNextTag() !== void){}
		(Dictionary.assign incontextof _macros)(macros);
		clear();
	}

	function scenarioLoop(name, label=""){
		stop();
		if(Storages.isExistentStorage(name+".ks")){
			dm("change : "+ name + ".ks");
			loadScenario(name+".ks");
			(Dictionary.assign incontextof macros)(_macros);
			try{
				if(label != "") goToLabel("*"+label);
			}catch{
				dm("指定されたラベルが見つかりませんでした : *" + label);
			}
			start();
		}else{
			dm(name+"が見つかりませんでした。");
		}
	}

	property interrupt{
		setter(v){_interrupt = v;}
		getter{return _interrupt;}
	}
}

