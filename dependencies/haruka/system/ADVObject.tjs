/*
	ADVオブジェクトクラス
*/

var id = 100;
var ADVLAYER_BACK		= (id+=100);	//一番後ろの背景
var ADVLAYER_EFFECT1	= (id+=100);
var ADVLAYER_CINEMA1	= (id+=100);
var ADVLAYER_BUSTUP_S	= (id+=100);	//Sサイズ
var ADVLAYER_EFFECT2	= (id+=100);
var ADVLAYER_BUSTUP_M	= (id+=100);	//Mサイズ
var ADVLAYER_EFFECT3	= (id+=100);
var ADVLAYER_BUSTUP_L	= (id+=100);	//Lサイズ
var ADVLAYER_EFFECT4	= (id+=100);
var ADVLAYER_CINEMA2	= (id+=100);
var ADVLAYER_CUTIN		= (id+=100);
var ADVLAYER_FLASH		= (id+=100);
var ADVLAYER_SELECT		= (id+=100);
delete id;

var ADVOBJ_NULL				= 0xefffffffffffffff;
var ADVOBJ_NONE				= 0;
var ADVOBJ_CG				= 0x01 << 0;
var ADVOBJ_BUSTUP			= 0x01 << 1;
var ADVOBJ_BUSTUP_FREE		= 0x01 << 2;
var ADVOBJ_SCREEN			= 0x01 << 3;

var ADVOBJ_DESTROY_NONE		= 0;	//
var ADVOBJ_DESTROY_WAIT		= 1;	//終了待ち状態
var ADVOBJ_DESTROY_STANDBY	= 2;	//もう消して良い状態

class ADVObjectInfo{
	var id;			//文字列ID
	var file;		//ファイル名
	var kind;		//オブジェクトタイプ
	var order;		//表示順
	var zOrder;		//距離
	var relate;		//位置関係
	var center;		//中心位置
	var trimming;	//トリミング

	function ADVObjectInfo(){
		id = "";
		file = "";
		kind = ADVOBJ_NONE;
		order = 0;
		zOrder = 0;
		relate = 0;
		center = new Point(ADVOBJ_NULL, ADVOBJ_NULL, ADVOBJ_NULL);
		trimming = false;
	}

	function copy(info){
		id = info.id;
		file = info.file;
		kind = info.kind;
		order = info.order;
		zOrder = info.zOrder;
		relate = info.relate;
		center.set(info.center);
		trimming = info.trimming;
	}

	function finalize(){
		invalidate center;
	}
}

class ADVObject extends Sprite{
	var _base;			//ベースレイヤ
	var _spr;			//本体レイヤ

	var _adv = null;	//ADVScreenオブジェクト

	var _info;

	var _worldPos;		//表示位置(ワールド座標)
	var _basePos;

	var _emotion;

	var _destroy;		//自滅フラグ(トランジションやアクティベーションが終了したときにオブジェクトを無効にする)

	//状態
	var _fresh;		//新規に作成されたオブジェクトである
					//adv.updateの最後でfalseにされる
	var _focus;		//ぼやけ
	var _envToneEnable = false;
	var _tone;		//トーン
	var _flipLR;
	var _flipUD;
	var _zoomBase;

	var _imageType;	// 1 : CGファイル 2 : 色指定の塗りつぶし

	var _tempPositioning;

	function ADVObject(win, par=null, id=""){
		super.Sprite(win, par);
		hasImage = false;

		setSize(WINDOW_WIDTH, WINDOW_HEIGHT);

		hitType = htMask;
		hitThreshold = 256;

		_base = new global.Layer(win, this);
		with(_base){
			.hasImage = false;

			.setSize(10000, 10000);		//大きいサイズを確保
			.visible = true;
		}
//		type = _base.type = ltBinder;

		_spr = new global.Sprite(win, _base);
		with(_spr){
			_spr.hitThreshold = 256;
			_spr.visible = true;
		}

		_info = new ADVObjectInfo();
		_info.kind = ADVOBJ_NONE;
		_info.relate = 0;
		_info.id = id;

		_worldPos = new Point(0, 0, 0);
		_basePos = new Point(0, 0, 0);

		_emotion = new AnimationSequenceList();

		destroy = ADVOBJ_DESTROY_NONE;

		_fresh = false;
		_focus = 0;
		_tone = "normal";
		_flipLR = 0;
		_flipUD = 0;
		_imageType = IMAGETYPE_NONE;
		_zoomBase = 0;

		@if(__DEBUGMODE__)
			font.face = FONT_DEFAULT_FACE;
		@endif

		_tempPositioning = false;
	}

	function finalize(){
		_adv = null;

		invalidate _emotion;
		invalidate _spr;
		invalidate _base;
		invalidate _info;
		invalidate _worldPos;
		invalidate _basePos;
		super.finalize();
	}

	function loadImages(file){
		_spr.loadImages(file);
		setSizeToImageSize();
	}

	function setSizeToImageSize(){
		_spr.setSizeToImageSize();
	}

	function fillRect(x, y, width, height, col){
		_spr.fillRect(...);
	}

	function drawText(x, y, text, color, opa=255, aa=true, shadowlevel=0, shadowcolor=0x000000, shadowwidth=0, shadowofsx=0, shadowofsy=0) {
		_spr.drawText(...);
	}

	function setup(elm, kind=ADVOBJ_NULL){
	/*
		elm = %[
			file
			rotate
			focus
			tone
			trans
			zoom
			flipLR
			flipUD
		]
	*/
		//画像ファイル読み込み
		try{
			var file = elm.file.toUpperCase();
			var col = GetDefineColorA(file);
			switch(col){
			case -1:
				AdvObjLoadImages(this, elm.file);
				_focus = 0;
				_tone = "normal";
				_imageType = IMAGETYPE_FILE;

				break;
			default:
				_spr.setImageSize(WINDOW_WIDTH, WINDOW_HEIGHT);
				_spr.fillRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, col);
				_imageType = IMAGETYPE_COLOR;
				break;
			}

			setSizeToImageSize();
		}catch{
			dm("画像ファイルが見つかりませんでした : "+elm.file);
			@if(__DEBUGMODE__)
			//ファイルが見つからないのでダミーを用意する
				if(kind != ADVOBJ_NULL){
				}
			@endif
			return false;
		}

		//回転
		if(elm.rotate !== void)	_spr.rotate = int(elm.rotate);

		//ぼやかし
		if(elm.focus !== void)	focus(elm.focus);

		//トーン(ガンマ)処理
		if(_envToneEnable) AdjustGamma(_spr, _adv.envTone);
		if(elm.tone !== void)	tone(elm.tone);

		//不透明度
		if(elm.trans !== void)	.opacity = int(elm.trans);

		//ズーム
		_zoomBase = int GetElm(elm.zoom, 0);
		zoom = _zoomBase + 100;

		//反転処理
		_flipLR = _flipUD = 0;
		if(elm.fliplr !== void)	flipLR();
		if(elm.flipud !== void)	flipUD();

		return true;
	}

	function setCenter(x, y){
		_info.center.set(x, y);
		_spr.setCenter(x, y);
		_spr.setAffineOffset(x, y);

		_spr.setPos(_base.width\2, _base.height\2);

		@if(__DEBUGMODE__)
		//基準点
			if(debug.tglBuCenter.state){
				if(info.kind & ADVOBJ_BUSTUP){
					_spr.colorRect(x-32, y,  64,  1, 0x0000ff, 32);
					_spr.colorRect(x, y-32,   1, 64, 0x0000ff, 32);
					_spr.colorRect(x-4, y-4,  9,  9, 0xff0000, 32);
				}
			}
		@endif
	}

	function setWorldPos(x, y, z){
		_worldPos.set(x, y, z);
	}

	function getWorldPos(){
		return _worldPos;
	}

	function setBasePos(x, y, z){
		_basePos.set(x, y, z);
	}

	function getBasePos(){
		return _basePos;
	}

	function setPos(x, y){
		left = x;
		top = y;
	}

	function beginTransition(name, childlen, src, elm){
		super.beginTransition(...);
	}
	function stopTransition(){
		super.stopTransition();
		if(destroy==ADVOBJ_DESTROY_WAIT) destroy=ADVOBJ_DESTROY_STANDBY;
	}

	function onTransitionCompleted(dest, src){
		super.onTransitionCompleted(dest, src);
		if(destroy==ADVOBJ_DESTROY_WAIT) destroy=ADVOBJ_DESTROY_STANDBY;
	}

	function flushActivation(){
		super.flushActivation();
		if(destroy==ADVOBJ_DESTROY_WAIT) destroy=ADVOBJ_DESTROY_STANDBY;
	}

	function stopActivation(){
		super.stopActivation();
		if(destroy==ADVOBJ_DESTROY_WAIT) destroy=ADVOBJ_DESTROY_STANDBY;
	}

	function doBoxBlur(x, y){
		_spr.doBoxBlur(x, y);
	}

	function flipLR(){
		_flipLR = _flipLR == 0 ? 1 : 0;
		_spr.flipLR();
	}
	function flipUD(){
		_flipUD = _flipUD == 0 ? 1 : 0;
		_spr.flipUD();
	}

	function tone(type="normal"){
		type = type.toLowerCase();

		var tgt = TONE_DIC[type];
		if(tgt === void) type = "normal";
		tgt = TONE_DIC[type];

		if(type == "normal" && _tone != "normal"){
			restoreImage();
			if(_focus != 0){
				//２回restoreImageさせない対策・・・
				_tone = "normal";
				var value = _focus;
				_focus = 0;

				focus(value);
			}
		}else{
			AdjustGamma(_spr, tgt);
		}
		_tone = type;
	}

	function focus(depth=0){
		if(_focus != 0){
			restoreImage();
			if(_tone != "normal"){
				//２回restoreImageさせない対策・・・
				_focus = 0;
				var value = _tone;
				_tone = "hoge";

				tone(value);
			}
		}

		_spr.doBoxBlur(depth, depth);
		_focus = depth;
	}

	//イメージ再読み込み
	function restoreImage(){
		//再読み込みするとアフィンオフセットがズレるので一時保存
		var afx = _spr.afx;
		var afy = _spr.afy;

		setup(%[file:_info.file, zoom:_zoomBase]);

		//保存しておいたアフィン値を再設定する
		_spr.setAffineOffset(afx, afy);
	}

	function emotion(sequence, param){
		param.parent = _base;

		var header = file.substring(0, 4);
		var no = file.substring(4, 3);
		var index = 0;
		for(var i=0;i<no.length;i++){
			if(no[i] != "0"){
				index = int (no.substring(i, 3-i) - 1);
				break;
			}
		}
		var size = file.substring(7, 1);
		var target = GetElm(param.target, "");
		var pos = GetElm(param.pos, "");
		var bx = _spr.left;
		var by = _spr.top;
		var scale = _spr.zoomx / 100.0;
		if(
			CG_SETUP_INFO[header] !== void && target.length ? 
				CG_SETUP_INFO[header][index] !== void ? 
					CG_SETUP_INFO[header][index][target] !== void 
				: false
			 : false){
			var pt;
			switch(size){
			case "M" : pt =  PointStrToNum(CG_SETUP_INFO[header][index][target][0]); break;
			case "L" : pt =  PointStrToNum(CG_SETUP_INFO[header][index][target][1]); break;
			}
			bx += pt.x * scale;
			by += pt.y * scale;
		}else if(target.length){
			var pt = PointStrToNum(target);
			bx += pt.x * scale;
			by += pt.y * scale;
		}else if(pos.length){
			var pt = PointStrToNum(pos);
			bx = (bx - WINDOW_CENTER_X) + pt.x * scale;
			by = (by - WINDOW_CENTER_Y) + pt.y * scale;
		}

		param.baseX = bx;
		param.baseY = by;
		param.baseAngle = int GetElm(param.angle, 0);
		param.baseScl = _spr.zoomx;

		_emotion.add(sequence, param);
	}
	function resetEmotion(elm){
		_emotion.clear();
	}
	function stopEmotion(elm){
		_emotion.stop();
	}
	function getEmotionList(){return _emotion;}
	function isEmotion(){return _emotion.count != 0;}

	property adv{
		setter(v){_adv = v;}
		getter(){return _adv;}
	}
	property left{
		setter(v){_base.left = int(v) + _basePos.x - _base.width\2;}
		getter(){return _base.left - _basePos.x + _base.width\2;}
	}
	property top{
		setter(v){_base.top = int(v) + _basePos.y - _base.height\2;}
		getter(){return _base.top - _basePos.y + _base.height\2;}
	}
	property width{
		setter(v){_spr.width = v;}
		getter(){return _spr.width;}
	}
	property height{
		setter(v){_spr.height = v;}
		getter(){return _spr.height;}
	}
	property imageWidth{
		setter(v){_spr.imageWidth = v;}
		getter(){return _spr.imageWidth;}
	}
	property imageHeight{
		setter(v){_spr.imageHeight = v;}
		getter(){return _spr.imageHeight;}
	}

	property info{
		setter(v){_info = v;}
		getter(){return _info;}
	}
	property id{
		setter(v){_info.id=v;}
		getter(){return _info.id;}
	}
	property file{
		setter(v){_info.file = v;}
		getter(){return _info.file;}
	}
	property kind{
		setter(v){_info.kind = v;}
		getter(){return _info.kind;}
	}
	property relate{
		setter(v){_info.relate = v;}
		getter(){return _info.relate;}
	}

	property imageType{
		getter(){return _imageType;}
	}

	property world{
		getter(){return _worldPos;}
	}
	property wtop{
		setter(v){_worldPos.y = v;}
		getter(){return _worldPos.y;}
	}
	property wleft{
		setter(v){_worldPos.x = v;}
		getter(){return _worldPos.x;}
	}

	property destroy{
		setter(v){_destroy = v;}
		getter(){return _destroy;}
	}

	property fresh{
		setter(v){_fresh = v;}
		getter(){return _fresh;}
	}

	property envToneEnable{
		getter(){return _envToneEnable;}
		setter(v){_envToneEnable = v;}
	}

	//AffineLayer系のオーバーライド
	property opacity {
		setter(v){_spr.opacity = v;}
		getter(){return _spr.opacity;}
	}
	property rotate {
		setter(v){_spr.rotate = v;}
		getter(){return _spr.rotate;}
	}
	property zoomx {
		setter(v){_spr.zoomx = _zoomBase + v;}
		getter(){return _spr.zoomx;}
	}
	property zoomy {
		setter(v){_spr.zoomy = _zoomBase + v;}
		getter(){return _spr.zoomy;}
	}
	property zoom {
		setter(v){_spr.zoom = _zoomBase + v;}
	}
	property zoomBase {
		getter(){return _zoomBase;}
		setter(v){_zoomBase = v;}
	}
	property afx {
		setter(v){_spr.afx = v;}
		getter(){return _spr.afx;}
	}
	property afy {
		setter(v){_spr.afy = v;}
		getter(){return _spr.afy;}
	}
	function setZoom(zx, zy=void) {
		_spr.setZoom(...);
	}

	property font{
		getter(){return _spr.font;}
	}
}

ADVObject.IMAGETYPE_NONE	= 0;
ADVObject.IMAGETYPE_FILE	= 1;
ADVObject.IMAGETYPE_COLOR	= 2;

var ADVOBJ_INFO = %[];
function AdvObjLoadImages(obj, filename){
	filename = filename.toUpperCase();

	if(!IsRegistAdvObjInfo(filename)){
	//情報がないのでcsvファイルの読み込みをしてみる
		LoadAdvObjInfo(filename);
	}

	var info = ADVOBJ_INFO[filename];
	if(info === void){
	//それでも情報が無かった場合は、そのまま読み込む
		obj.loadImages(filename);
	}else{
		obj.loadImages(info.base);
		if(info.diff != ""){
		//差分処理
			var diff = new Layer(obj.window, obj);
			diff.loadImages(info.diff);
			obj._spr.copyRect(info.x, info.y, diff, 0, 0, info.w, info.h);
			invalidate diff;
		}
		return info;
	}
}
function AdvObjLoadImagesToLayer(layer, filename){
	filename = filename.toUpperCase();

	if(!IsRegistAdvObjInfo(filename)){
	//情報がないのでcsvファイルの読み込みをしてみる
		LoadAdvObjInfo(filename);
	}

	var info = ADVOBJ_INFO[filename];
	if(info === void){
	//それでも情報が無かった場合は、そのまま読み込む
		layer.loadImages(filename);
	}else{
		layer.loadImages(info.base);
		if(info.diff != ""){
		//差分処理
			var diff = new Layer(layer.window, layer);
			diff.loadImages(info.diff);
			layer.copyRect(info.x, info.y, diff, 0, 0, info.w, info.h);
			invalidate diff;
		}
		return info;
	}
}

function LoadAdvObjInfo(file){
	var csvFile;
	switch(file.charAt(0)){
	case "C" : 
		var charID = file.substring(0, 2);
		var sizeID = file.substring(7, 1);

		LoadAdvObjCsv(charID + sizeID);
		LoadAdvObjCsv(charID + "x_" + sizeID);
		LoadAdvObjCsv(charID + "y_" + sizeID);
		LoadAdvObjCsv(charID + "z_" + sizeID);

		var charID = file.substring(0, 4);
		LoadAdvObjCsv(charID + sizeID);
		LoadAdvObjCsv(charID + "x_" + sizeID);
		LoadAdvObjCsv(charID + "y_" + sizeID);
		LoadAdvObjCsv(charID + "z_" + sizeID);
		break;
	case "E" : 
		csvFile = file.substring(0, 4);
		LoadAdvObjCsv(csvFile);
		LoadAdvObjCsv(csvFile+"L");
		break;
	case "B" : 
		csvFile = "bgData";
		LoadAdvObjCsv(csvFile);
		break;
	case "S" : 
		csvFile = file.substring(0, 6);
		LoadAdvObjCsv(csvFile);
		break;
	}
}

function LoadAdvObjCsv(csvFile){
	if(!Storages.isExistentStorage(csvFile + ".csv")) return;

	var csv = new CSVParser();
	try{
		csv.initStorage(csvFile + ".csv");
	}catch{
		dm("csv not found - " + csvFile + ".csv");
		invalidate csv;
		return;
	}

	//最初の行を読む
	var head = csv.getNextLine();

	var line;
	while((line = csv.getNextLine()) !== void){
		ADVOBJ_INFO[line[0]] = %[];
		var ref = ADVOBJ_INFO[line[0]];
		ref.base = string line[1];
		ref.diff = string line[2];
		ref.x = int line[3];
		ref.y = int line[4];
		ref.w = int line[5];
		ref.h = int line[6];
		ref.guidex = int line[7];
		ref.guidey = int line[8];
	}

	invalidate csv;
}
function IsRegistAdvObjInfo(file){
	if(file === void || file == "") return false;
	return (ADVOBJ_INFO[file] !== void);
}
function GetAdvObjectInfo(file){
	file = file.toUpperCase();
	var ret;
	if(ADVOBJ_INFO[file] === void){
		LoadAdvObjInfo(file);
	}
	ret = ADVOBJ_INFO[file];

	return ret;
}
