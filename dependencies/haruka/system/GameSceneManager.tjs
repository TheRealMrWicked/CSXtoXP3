/*
	ゲームシーン管理クラス
*/

/* const */
var index = 0;
var SCENE_LOGO			= index++;
var SCENE_MOVIE			= index++;
var SCENE_TITLE			= index++;
var SCENE_ADV			= index++;
var SCENE_ALBUM			= index++;
var SCENE_MUSIC			= index++;
var SCENE_MEMORIES		= index++;
var SCENE_STAFFROLL		= index++;
var SCENE_END			= index++;
delete index;

class SceneBase extends InputNotifyBase{
	var _valid = true;

	function SceneBase(){}

	function action(ev){}

	function who(){return "SceneBase";}

	property valid{
		setter(v){_valid = v;}
		getter(){return _valid;}
	}
}

class SceneManager extends SceneBase{
	var _win;
	var _scene;
	var _nextScene;
	var _sceneObj;

	var _fExitGame;

	var _param;
	var _sceneChangeTimer;

	var _enableClose;

	function SceneManager(win){
		_win = win;

		_sceneObj = new Array();
		_scene = _nextScene = -1;

		_param = %[];

		_fExitGame = false;

		_sceneChangeTimer = new Timer(onWaitSceneChange, "");
		_sceneChangeTimer.interval = 100;
		_sceneChangeTimer.enabled = false;

		_enableClose = true;

		_win.addInputNotify(this);
	}
	function finalize(){
		InvalidateArray(_sceneObj);

		invalidate _param;
		invalidate _sceneChangeTimer;
	}

	function who(){return "SceneManager";}

	function onCloseQuery(canclose){
		canclose = false;
		return canclose;
	}

	function changeScene(scene, sync=true, param=%[]){
		(Dictionary.assign incontextof _param)(param);

		if(sync == false || _scene == -1){
			setScene(scene);
		}else{
			_nextScene = scene;
			_sceneChangeTimer.enabled = true;
		}
	}

	function getScene(scene){
		return _sceneObj[scene];
	}

	function setScene(scene){
		System.doCompact(clIdle);

		@if(__DEBUGMODE__)
			if(debug.flagEditer !== void){
				debug.onCloseFlagEditer();
				debug.showFlagEditer(true);
			}
		@endif

		_scene = scene;
		switch(scene){
		case SCENE_LOGO:
			_sceneObj[scene] = new Logo(_win, _win.baseLayer);
			changeScene(SCENE_TITLE);
			break;
		case SCENE_MOVIE:
			_sceneObj[scene] = new MovieScene(_win, _win.baseLayer);
			break;
		case SCENE_TITLE:
			var subMenu = int GetElm(_param.submenu, 0);
			_sceneObj[scene] = new Title(_win, _win.baseLayer, subMenu);
			break;
		case SCENE_ADV:
			var recollectParam = %[
				recollect : GetElm(_param.recollect, true, false),
				start : int GetElm(_param.recollectStart, 0),
				end : int GetElm(_param.recollectEnd, 0),
			];

			_sceneObj[scene] = new ADVScreen(_win, LAYER_ADVSCREEN, LAYER_ADVMESSAGE, recollectParam);
			@if(__DEBUGMODE__)
				debug.applyFlagToAdv();
				if(debug.flagEditer !== void){
					debug.flagEditer.setTarget(_sceneObj[scene]._param);
					debug.flagEditer.setPage();
				}
			@endif

			var label = "";
			if(_param.label !== void) label = _param.label;
			if(_param.scenario !== void)
				_sceneObj[scene].start(_param.scenario, label);
			else if(_param.debug !== void)
				_sceneObj[scene].debugStart(_param.debug, label);
			else if(_param.file !== void)
				_sceneObj[scene].load(_param.file);
			break;
		case SCENE_ALBUM:
			_sceneObj[scene] = new AlbumModeScene(_win, _win.baseLayer);
			break;
		case SCENE_MUSIC:
			_sceneObj[scene] = new MusicModeScene(_win, _win.baseLayer);
			break;
		case SCENE_MEMORIES:
			_sceneObj[scene] = new MemoriesModeScene(_win, _win.baseLayer);
			break;
		case SCENE_STAFFROLL:
			var adv = null;
			if(game.getScene(SCENE_ADV) !== void) adv = game.getScene(SCENE_ADV);
			_sceneObj[scene] = new StaffRollScene(_win, _win.baseLayer, adv);
			break;
		case SCENE_END:
			_sceneObj[scene] = new EndScene(_win, _win.baseLayer);
			break;
		default:
			break;
		}
		(Dictionary.clear incontextof _param)();
	}

	function onWaitSceneChange(){
		if(_sceneObj[_scene].valid == false){
			invalidate _sceneObj[_scene];
			//delete _sceneObj[_scene];
			_sceneObj[_scene] = void;
			setScene(_nextScene);
			_nextScene = -1;
			_sceneChangeTimer.enabled = false;
		}
	}

	function onKeyDown(key, shift, process=true){
		@if(__DEBUGMODE__)
			if(key == VK_F2){
				switch(_scene){
				case SCENE_LOGO :
				case SCENE_TITLE :
				case SCENE_MOVIE :
					var save = saveMan.atQSave();
					if(save !== void){
						if(save.valid){
							var scene = getScene(_scene);
							scene.close();

							BeginLoad(quickLoad);
							var save = saveMan.atQSave();
							changeScene(SCENE_ADV, true, %[file:save.file]);
						}
					}
					break;
				}
			}else if(key == VK_F11){
			}
		@endif
	}

	function quickLoad(){
		var scene = getScene(_scene);
		scene.close();
	}

	function load(file, fDropFile=false){
		if(fDropFile){
		//ドロップファイルの場合は中身をチェックする。
			var save = new Savedata(file);
			if(!save.isValid()){
				invalidate save;
				return;
			}
			invalidate save;
		}

		//全てのウィンドウを閉じる
		if(IsSettingWindow()) HideSettingWindow();

		switch(_scene){
		case SCENE_LOGO :
		case SCENE_TITLE :
		case SCENE_MOVIE :
			var scene = getScene(_scene);
			scene.close();
			changeScene(SCENE_ADV, true, %[file:file]);
			break;
		case SCENE_ADV :
			var scene = getScene(_scene);
			//hitret中じゃないとロードできない
			if(scene.hitretState) scene.load(file);
			break;
		case SCENE_ALBUM :
		case SCENE_MUSIC :
		case SCENE_MEMORIES :
			var scene = getScene(_scene);
			scene.close();
			changeScene(SCENE_ADV, true, %[file:file]);
			break;
		}
	}

	function action(ev){
		if(ev.type == "onFileDrop"){
			load(ev.files[0], true);
		}else if(ev.type == "load"){
			load(ev.files[0], false);
		}else if(ev.type == "onCloseQuery" && _enableClose){
			var f = true;
//			if(_sceneObj[SCENE_ADV] !== void){
//				var adv = _sceneObj[SCENE_ADV];
//				f = adv.hitretState;
//			}
			if(!IsShowConfirm() && !_fExitGame && f){
				if(CONFIG.confirmWindow[SystemRegister.CONFIRM_END])
					PlaySystemVoice("ゲーム終了：確認");
				CallConfirm("ゲームを終了しますか？", SystemRegister.CONFIRM_END, exitGame, null);
			}
		}
	}

	function exitGame(){
		_fExitGame = true;
		var scene = getScene(_scene);
		scene.valid = false;
		game.changeScene(SCENE_END);
	}

	//ゲームを終了させる。
	function shutdown(){
	//終了処理のハンドルを登録して、外部から呼ぶ出させる準備
		if(!valid) return;

		global.shutdownTrigger = new AsyncTrigger(shutdownHandle, "");
		global.shutdownTrigger.cached = true;
		global.shutdownTrigger.trigger();
		valid = false;
	}
	function shutdownHandle(){
	//実際に終了させる処理

		//活動している共有オブジェクトを停止させる
		var comObj = [
			SPR_ADV_HIDE, SPR_CONFIRM, SPR_INFORMATION, SPR_STAFFROLL, SPR_COVER, SPR_LOADSAVE, SPR_HISTORY, SPR_CONFIG
		];
		for(var i=0;i<comObj.count;i++){
			if(comObj[i] != null) comObj[i].stopActivation() if comObj[i].isActivation();
		}

		if(CONFIG.screenModeKeep == 0){
		//システム情報を保存する前に初期化する
			CONFIG.fullScreen = 0;
			CONFIG.windowZoom = WINDOW_ZOOM_PER;
		}
		//システム情報保存
		SaveSystemRegister();

		var temp = _win.askClose;
		_win.askClose = false;
		for(var i=0;i<_sceneObj.count;i++){
			invalidate _sceneObj[i];
		}
		_win.close();
 		_win.askClose = temp if isvalid _win;
	}

	property enableClose{
		setter(v){_enableClose = v;}
		getter(){return _enableClose;}
	}
}
